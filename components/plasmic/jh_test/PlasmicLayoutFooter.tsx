// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: p_5BOqwmCgXz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import BaseComponentsSocialIcons from "../../BaseComponentsSocialIcons"; // plasmic-import: fANKuPlo2Cc-/component
import BaseComponentsSwitch from "../../BaseComponentsSwitch"; // plasmic-import: RqwwBNLEqnoR/component

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsjuWiTdOksfiv } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JUWiTdOksfiv/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicLayoutFooter.module.css"; // plasmic-import: p_5BOqwmCgXz/css

createPlasmicElementProxy;

export type PlasmicLayoutFooter__VariantMembers = {};
export type PlasmicLayoutFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicLayoutFooter__VariantsArgs;
export const PlasmicLayoutFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicLayoutFooter__ArgsType = {};
type ArgPropType = keyof PlasmicLayoutFooter__ArgsType;
export const PlasmicLayoutFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicLayoutFooter__OverridesType = {
  foot?: Flex__<"div">;
  columns?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  text?: Flex__<"div">;
  baseComponentsSocialIcons?: Flex__<typeof BaseComponentsSocialIcons>;
  _switch?: Flex__<typeof BaseComponentsSwitch>;
  hal?: Flex__<"a"> & Partial<LinkProps>;
  ctf?: Flex__<"a"> & Partial<LinkProps>;
  uc?: Flex__<"a"> & Partial<LinkProps>;
  courses?: Flex__<"a"> & Partial<LinkProps>;
  blog?: Flex__<"a"> & Partial<LinkProps>;
  faq?: Flex__<"a"> & Partial<LinkProps>;
  leadership?: Flex__<"a"> & Partial<LinkProps>;
  authors?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultLayoutFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLayoutFooter__RenderFunc(props: {
  variants: PlasmicLayoutFooter__VariantsArgs;
  args: PlasmicLayoutFooter__ArgsType;
  overrides: PlasmicLayoutFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "_switch.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsjuWiTdOksfiv(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <div
      data-plasmic-name={"foot"}
      data-plasmic-override={overrides.foot}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.foot,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale"),
          [sty.footglobal_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        hasGap={true}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__n19K)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bVB, {
              [sty.freeBoxglobal_theme_dark__bVBe6UCs]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img, {
                [sty.imgglobal_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })}
              displayHeight={
                hasVariant(globalVariants, "theme", "dark") ? "120px" : "3.5rem"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "theme", "dark") ? "120px" : "3.5rem"
              }
              src={{
                src: "/plasmic/jh_test/images/jhtLogoPng.png",
                fullWidth: 300,
                fullHeight: 300,
                aspectRatio: undefined
              }}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mzlO)}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text,
                  {
                    [sty.textglobal_theme_dark]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  }
                )}
              >
                {"Connect with us"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___2Ih7U, {
                  [sty.freeBoxglobal_theme_dark___2Ih7Ue6UCs]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  )
                })}
              >
                <BaseComponentsSocialIcons
                  data-plasmic-name={"baseComponentsSocialIcons"}
                  data-plasmic-override={overrides.baseComponentsSocialIcons}
                  className={classNames(
                    "__wab_instance",
                    sty.baseComponentsSocialIcons,
                    {
                      [sty.baseComponentsSocialIconsglobal_theme_dark]:
                        hasVariant(globalVariants, "theme", "dark")
                    }
                  )}
                />
              </Stack__>
            </Stack__>
            <BaseComponentsSwitch
              data-plasmic-name={"_switch"}
              data-plasmic-override={overrides._switch}
              className={classNames("__wab_instance", sty._switch)}
              isSelected={generateStateValueProp($state, [
                "_switch",
                "isSelected"
              ])}
              label={"Theme"}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "_switch",
                  "isSelected"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />
          </Stack__>
        </div>
        <div className={classNames(projectcss.all, sty.column__lfjEx)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__rbg1B)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__kswK, {
                [sty.freeBoxglobal_theme_dark__kswKe6UCs]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })}
            >
              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6___1A2Zm
                )}
              >
                {"Paths"}
              </h6>
              <PlasmicLink__
                data-plasmic-name={"hal"}
                data-plasmic-override={overrides.hal}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.hal,
                  {
                    [sty.halglobal_theme_dark]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  }
                )}
                component={Link}
                href={`/pathway/${"hack-along"}`}
                platform={"nextjs"}
              >
                {"Hack Alongs"}
              </PlasmicLink__>
              <PlasmicLink__
                data-plasmic-name={"ctf"}
                data-plasmic-override={overrides.ctf}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.ctf,
                  {
                    [sty.ctfglobal_theme_dark]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  }
                )}
                component={Link}
                href={`/pathway/${"capture-the-flag"}`}
                platform={"nextjs"}
              >
                {"Capture the Flags"}
              </PlasmicLink__>
              <PlasmicLink__
                data-plasmic-name={"uc"}
                data-plasmic-override={overrides.uc}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.uc,
                  {
                    [sty.ucglobal_theme_dark]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  }
                )}
                component={Link}
                href={`/pathway/${"upskill-challenge"}`}
                platform={"nextjs"}
              >
                {"Upskill Challenges"}
              </PlasmicLink__>
              <PlasmicLink__
                data-plasmic-name={"courses"}
                data-plasmic-override={overrides.courses}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.courses,
                  {
                    [sty.coursesglobal_theme_dark]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  }
                )}
                component={Link}
                href={`/pathway/${"course"}`}
                platform={"nextjs"}
              >
                {"Courses"}
              </PlasmicLink__>
            </Stack__>
          </Stack__>
        </div>
        <div className={classNames(projectcss.all, sty.column__pfVho)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__mEx2L)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__kFau9)}
            >
              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6__zNsUb
                )}
              >
                {"resources"}
              </h6>
              <PlasmicLink__
                data-plasmic-name={"blog"}
                data-plasmic-override={overrides.blog}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.blog
                )}
                component={Link}
                href={`/blog`}
                platform={"nextjs"}
              >
                {"Blog"}
              </PlasmicLink__>
              <PlasmicLink__
                data-plasmic-name={"faq"}
                data-plasmic-override={overrides.faq}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.faq
                )}
                component={Link}
                href={`/faq`}
                platform={"nextjs"}
              >
                {"FAQ"}
              </PlasmicLink__>
            </Stack__>
          </Stack__>
        </div>
        <div className={classNames(projectcss.all, sty.column__rOn47)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__m7BWb)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iUkzo)}
            >
              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6___3P240
                )}
              >
                {"about"}
              </h6>
              <PlasmicLink__
                data-plasmic-name={"leadership"}
                data-plasmic-override={overrides.leadership}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.leadership
                )}
                component={Link}
                href={`/about-us`}
                platform={"nextjs"}
              >
                {"Leadership"}
              </PlasmicLink__>
              <PlasmicLink__
                data-plasmic-name={"authors"}
                data-plasmic-override={overrides.authors}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.authors
                )}
                component={Link}
                href={`/authors`}
                platform={"nextjs"}
              >
                {"Authors"}
              </PlasmicLink__>
            </Stack__>
          </Stack__>
        </div>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  foot: [
    "foot",
    "columns",
    "img",
    "text",
    "baseComponentsSocialIcons",
    "_switch",
    "hal",
    "ctf",
    "uc",
    "courses",
    "blog",
    "faq",
    "leadership",
    "authors"
  ],
  columns: [
    "columns",
    "img",
    "text",
    "baseComponentsSocialIcons",
    "_switch",
    "hal",
    "ctf",
    "uc",
    "courses",
    "blog",
    "faq",
    "leadership",
    "authors"
  ],
  img: ["img"],
  text: ["text"],
  baseComponentsSocialIcons: ["baseComponentsSocialIcons"],
  _switch: ["_switch"],
  hal: ["hal"],
  ctf: ["ctf"],
  uc: ["uc"],
  courses: ["courses"],
  blog: ["blog"],
  faq: ["faq"],
  leadership: ["leadership"],
  authors: ["authors"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  foot: "div";
  columns: "div";
  img: typeof PlasmicImg__;
  text: "div";
  baseComponentsSocialIcons: typeof BaseComponentsSocialIcons;
  _switch: typeof BaseComponentsSwitch;
  hal: "a";
  ctf: "a";
  uc: "a";
  courses: "a";
  blog: "a";
  faq: "a";
  leadership: "a";
  authors: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLayoutFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLayoutFooter__VariantsArgs;
    args?: PlasmicLayoutFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLayoutFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLayoutFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLayoutFooter__ArgProps,
          internalVariantPropNames: PlasmicLayoutFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLayoutFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "foot") {
    func.displayName = "PlasmicLayoutFooter";
  } else {
    func.displayName = `PlasmicLayoutFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicLayoutFooter = Object.assign(
  // Top-level PlasmicLayoutFooter renders the root element
  makeNodeComponent("foot"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),
    baseComponentsSocialIcons: makeNodeComponent("baseComponentsSocialIcons"),
    _switch: makeNodeComponent("_switch"),
    hal: makeNodeComponent("hal"),
    ctf: makeNodeComponent("ctf"),
    uc: makeNodeComponent("uc"),
    courses: makeNodeComponent("courses"),
    blog: makeNodeComponent("blog"),
    faq: makeNodeComponent("faq"),
    leadership: makeNodeComponent("leadership"),
    authors: makeNodeComponent("authors"),

    // Metadata about props expected for PlasmicLayoutFooter
    internalVariantProps: PlasmicLayoutFooter__VariantProps,
    internalArgProps: PlasmicLayoutFooter__ArgProps
  }
);

export default PlasmicLayoutFooter;
/* prettier-ignore-end */
