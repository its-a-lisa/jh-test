// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: qbwUNgcK1xVZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ComponentsPathwayExploreItem from "../../ComponentsPathwayExploreItem"; // plasmic-import: cGGmkqUuZx0r/component
import BaseComponentsButton from "../../BaseComponentsButton"; // plasmic-import: Jmnl_p0DOnfd/component

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicSectionsExlporationsContainer.module.css"; // plasmic-import: qbwUNgcK1xVZ/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 24mFtLAbdat_/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: ao7Scrvo-vPs/icon
import CourseIcon from "./icons/PlasmicIcon__Course"; // plasmic-import: pJ58w7Rcc4LY/icon
import UpskillchallengeIcon from "./icons/PlasmicIcon__Upskillchallenge"; // plasmic-import: tyIGVGgCPx6-/icon
import HackalongIcon from "./icons/PlasmicIcon__Hackalong"; // plasmic-import: CI9bePwYeqk_/icon
import CtfIcon from "./icons/PlasmicIcon__Ctf"; // plasmic-import: L888xZKVD1mv/icon

createPlasmicElementProxy;

export type PlasmicSectionsExlporationsContainer__VariantMembers = {};
export type PlasmicSectionsExlporationsContainer__VariantsArgs = {};
type VariantPropType = keyof PlasmicSectionsExlporationsContainer__VariantsArgs;
export const PlasmicSectionsExlporationsContainer__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSectionsExlporationsContainer__ArgsType = {};
type ArgPropType = keyof PlasmicSectionsExlporationsContainer__ArgsType;
export const PlasmicSectionsExlporationsContainer__ArgProps =
  new Array<ArgPropType>();

export type PlasmicSectionsExlporationsContainer__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultSectionsExlporationsContainerProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionsExlporationsContainer__RenderFunc(props: {
  variants: PlasmicSectionsExlporationsContainer__VariantsArgs;
  args: PlasmicSectionsExlporationsContainer__ArgsType;
  overrides: PlasmicSectionsExlporationsContainer__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale"),
          [sty.rootglobal_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__hW3)}>
        <ComponentsPathwayExploreItem
          actionSlot={
            <BaseComponentsButton
              className={classNames(
                "__wab_instance",
                sty.baseComponentsButton__urvWf,
                {
                  [sty.baseComponentsButtonglobal_theme_dark__urvWFe6UCs]:
                    hasVariant(globalVariants, "theme", "dark")
                }
              )}
              fancy={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xQ6Fu,
                    {
                      [sty.textglobal_theme_dark__xQ6Fue6UCs]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {"Explore Courses"}
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["goToAboutPathwayPathway"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/pathway/${"course"}`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToAboutPathwayPathway"] != null &&
                  typeof $steps["goToAboutPathwayPathway"] === "object" &&
                  typeof $steps["goToAboutPathwayPathway"].then === "function"
                ) {
                  $steps["goToAboutPathwayPathway"] = await $steps[
                    "goToAboutPathwayPathway"
                  ];
                }
              }}
              size={"extraSmall"}
            />
          }
          className={classNames(
            "__wab_instance",
            sty.componentsPathwayExploreItem___4TsJg,
            {
              [sty.componentsPathwayExploreItemglobal_theme_dark___4TsJGe6UCs]:
                hasVariant(globalVariants, "theme", "dark")
            }
          )}
          descriptionSlot={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nzGuC
              )}
            >
              {"In-depth cybersecurity courses for skill development."}
            </div>
          }
          headlineSlot={
            <h4
              className={classNames(
                projectcss.all,
                projectcss.h4,
                projectcss.__wab_text,
                sty.h4__roMzs,
                {
                  [sty.h4global_theme_dark__roMzSe6UCs]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  )
                }
              )}
            >
              {"Course"}
            </h4>
          }
          iconSlot={
            <CourseIcon
              className={classNames(projectcss.all, sty.svg___8SyOh)}
              role={"img"}
            />
          }
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___3V4G)}>
        <ComponentsPathwayExploreItem
          actionSlot={
            <BaseComponentsButton
              className={classNames(
                "__wab_instance",
                sty.baseComponentsButton__yeBcb,
                {
                  [sty.baseComponentsButtonglobal_theme_dark__yeBcBe6UCs]:
                    hasVariant(globalVariants, "theme", "dark")
                }
              )}
              fancy={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__reHd
                  )}
                >
                  {"Explore UCs"}
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["goToAboutPathwayPathway"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/pathway/${"upskill-challenge"}`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToAboutPathwayPathway"] != null &&
                  typeof $steps["goToAboutPathwayPathway"] === "object" &&
                  typeof $steps["goToAboutPathwayPathway"].then === "function"
                ) {
                  $steps["goToAboutPathwayPathway"] = await $steps[
                    "goToAboutPathwayPathway"
                  ];
                }
              }}
              size={"extraSmall"}
            />
          }
          className={classNames(
            "__wab_instance",
            sty.componentsPathwayExploreItem___8P9ON,
            {
              [sty.componentsPathwayExploreItemglobal_theme_dark___8P9ONe6UCs]:
                hasVariant(globalVariants, "theme", "dark")
            }
          )}
          descriptionSlot={
            "Quick challenges to boost specific cybersecurity skills."
          }
          headlineSlot={
            <h4
              className={classNames(
                projectcss.all,
                projectcss.h4,
                projectcss.__wab_text,
                sty.h4___5Ypnz
              )}
            >
              {"Upskill Challenge"}
            </h4>
          }
          iconSlot={
            <UpskillchallengeIcon
              className={classNames(projectcss.all, sty.svg___7XCuw)}
              role={"img"}
            />
          }
          pathwaySlug={"upskill-challenge"}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__ixgr1)}>
        <ComponentsPathwayExploreItem
          actionSlot={
            <BaseComponentsButton
              className={classNames(
                "__wab_instance",
                sty.baseComponentsButton__miRh7,
                {
                  [sty.baseComponentsButtonglobal_theme_dark__miRh7E6UCs]:
                    hasVariant(globalVariants, "theme", "dark")
                }
              )}
              fancy={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mg0I
                  )}
                >
                  {"Explore HALs"}
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["goToAboutPathwayPathway"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/pathway/${"hack-along"}`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToAboutPathwayPathway"] != null &&
                  typeof $steps["goToAboutPathwayPathway"] === "object" &&
                  typeof $steps["goToAboutPathwayPathway"].then === "function"
                ) {
                  $steps["goToAboutPathwayPathway"] = await $steps[
                    "goToAboutPathwayPathway"
                  ];
                }
              }}
              size={"extraSmall"}
            />
          }
          className={classNames(
            "__wab_instance",
            sty.componentsPathwayExploreItem__qtl0
          )}
          descriptionSlot={
            "Hands-on sessions with guided cybersecurity tutorials."
          }
          headlineSlot={
            <h4
              className={classNames(
                projectcss.all,
                projectcss.h4,
                projectcss.__wab_text,
                sty.h4__yMc
              )}
            >
              {"Hack-Along"}
            </h4>
          }
          iconSlot={
            <HackalongIcon
              className={classNames(projectcss.all, sty.svg__vdLnm)}
              role={"img"}
            />
          }
          pathwaySlug={"hack-along"}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__tbmYd)}>
        <ComponentsPathwayExploreItem
          actionSlot={
            <BaseComponentsButton
              className={classNames(
                "__wab_instance",
                sty.baseComponentsButton__crGut,
                {
                  [sty.baseComponentsButtonglobal_theme_dark__crGuTe6UCs]:
                    hasVariant(globalVariants, "theme", "dark")
                }
              )}
              fancy={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sSh4O
                  )}
                >
                  {"Explore CTFs"}
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["goToAboutPathwayPathway"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/pathway/${"capture-the-flag"}`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToAboutPathwayPathway"] != null &&
                  typeof $steps["goToAboutPathwayPathway"] === "object" &&
                  typeof $steps["goToAboutPathwayPathway"].then === "function"
                ) {
                  $steps["goToAboutPathwayPathway"] = await $steps[
                    "goToAboutPathwayPathway"
                  ];
                }
              }}
              size={"extraSmall"}
            />
          }
          className={classNames(
            "__wab_instance",
            sty.componentsPathwayExploreItem__by7L8,
            {
              [sty.componentsPathwayExploreItemglobal_theme_dark__by7L8E6UCs]:
                hasVariant(globalVariants, "theme", "dark")
            }
          )}
          descriptionSlot={
            "Cybersecurity challenges to test your problem-solving."
          }
          headlineSlot={
            <h4
              className={classNames(
                projectcss.all,
                projectcss.h4,
                projectcss.__wab_text,
                sty.h4__nbnak
              )}
            >
              {"Capture the Flag"}
            </h4>
          }
          pathwaySlug={"capture-the-flag"}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionsExlporationsContainer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionsExlporationsContainer__VariantsArgs;
    args?: PlasmicSectionsExlporationsContainer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicSectionsExlporationsContainer__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicSectionsExlporationsContainer__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionsExlporationsContainer__ArgProps,
          internalVariantPropNames:
            PlasmicSectionsExlporationsContainer__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionsExlporationsContainer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionsExlporationsContainer";
  } else {
    func.displayName = `PlasmicSectionsExlporationsContainer.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionsExlporationsContainer = Object.assign(
  // Top-level PlasmicSectionsExlporationsContainer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSectionsExlporationsContainer
    internalVariantProps: PlasmicSectionsExlporationsContainer__VariantProps,
    internalArgProps: PlasmicSectionsExlporationsContainer__ArgProps
  }
);

export default PlasmicSectionsExlporationsContainer;
/* prettier-ignore-end */
