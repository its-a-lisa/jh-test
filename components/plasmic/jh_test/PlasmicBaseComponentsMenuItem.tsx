// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: FENpTl10T9dh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseListBoxItem } from "@plasmicpkgs/react-aria/skinny/registerListBoxItem";
import { BaseText } from "@plasmicpkgs/react-aria/skinny/registerText";
import { BaseText as BaseText2 } from "@plasmicpkgs/react-aria/skinny/registerText";

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicBaseComponentsMenuItem.module.css"; // plasmic-import: FENpTl10T9dh/css

createPlasmicElementProxy;

export type PlasmicBaseComponentsMenuItem__VariantMembers = {};
export type PlasmicBaseComponentsMenuItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicBaseComponentsMenuItem__VariantsArgs;
export const PlasmicBaseComponentsMenuItem__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBaseComponentsMenuItem__ArgsType = {
  value?: string;
  label?: string;
  description?: string;
  destination?: string;
};
type ArgPropType = keyof PlasmicBaseComponentsMenuItem__ArgsType;
export const PlasmicBaseComponentsMenuItem__ArgProps = new Array<ArgPropType>(
  "value",
  "label",
  "description",
  "destination"
);

export type PlasmicBaseComponentsMenuItem__OverridesType = {
  root?: Flex__<typeof BaseListBoxItem>;
  contentStack?: Flex__<"div">;
  ariaText?: Flex__<typeof BaseText>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  ariaDescription?: Flex__<typeof BaseText2>;
  text?: Flex__<"div">;
};

export interface DefaultBaseComponentsMenuItemProps {
  value?: string;
  label?: string;
  description?: string;
  destination?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBaseComponentsMenuItem__RenderFunc(props: {
  variants: PlasmicBaseComponentsMenuItem__VariantsArgs;
  args: PlasmicBaseComponentsMenuItem__ArgsType;
  overrides: PlasmicBaseComponentsMenuItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          value: ``,
          label: "Item 1",
          destination: "/"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  const [$ccVariants, setDollarCcVariants] = React.useState<
    Record<string, boolean>
  >({
    hovered: false,
    pressed: false,
    focused: false,
    focusVisible: false,
    selected: false,
    disabled: false
  });
  const updateVariant = React.useCallback(
    (changes: Record<string, boolean>) => {
      setDollarCcVariants(prev => {
        if (!Object.keys(changes).some(k => prev[k] !== changes[k])) {
          return prev;
        }
        return { ...prev, ...changes };
      });
    },
    []
  );

  return (
    <BaseListBoxItem
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale")
        }
      )}
      id={args.value}
      plasmicUpdateVariant={updateVariant}
      textValue={args.label}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"contentStack"}
        data-plasmic-override={overrides.contentStack}
        hasGap={true}
        className={classNames(projectcss.all, sty.contentStack)}
      >
        <BaseText
          data-plasmic-name={"ariaText"}
          data-plasmic-override={overrides.ariaText}
          className={classNames("__wab_instance", sty.ariaText)}
          slot={"label"}
        >
          <PlasmicLink__
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link
            )}
            component={Link}
            href={(() => {
              try {
                return $props.destination;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            platform={"nextjs"}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.label;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Item 1";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </PlasmicLink__>
        </BaseText>
        {(() => {
          try {
            return $props.description;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <BaseText2
            data-plasmic-name={"ariaDescription"}
            data-plasmic-override={overrides.ariaDescription}
            className={classNames("__wab_instance", sty.ariaDescription)}
            slot={"description"}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>{$props.description}</React.Fragment>
            </div>
          </BaseText2>
        ) : null}
      </Stack__>
    </BaseListBoxItem>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "contentStack", "ariaText", "link", "ariaDescription", "text"],
  contentStack: ["contentStack", "ariaText", "link", "ariaDescription", "text"],
  ariaText: ["ariaText", "link"],
  link: ["link"],
  ariaDescription: ["ariaDescription", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof BaseListBoxItem;
  contentStack: "div";
  ariaText: typeof BaseText;
  link: "a";
  ariaDescription: typeof BaseText2;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBaseComponentsMenuItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBaseComponentsMenuItem__VariantsArgs;
    args?: PlasmicBaseComponentsMenuItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBaseComponentsMenuItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBaseComponentsMenuItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBaseComponentsMenuItem__ArgProps,
          internalVariantPropNames: PlasmicBaseComponentsMenuItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBaseComponentsMenuItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBaseComponentsMenuItem";
  } else {
    func.displayName = `PlasmicBaseComponentsMenuItem.${nodeName}`;
  }
  return func;
}

export const PlasmicBaseComponentsMenuItem = Object.assign(
  // Top-level PlasmicBaseComponentsMenuItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    contentStack: makeNodeComponent("contentStack"),
    ariaText: makeNodeComponent("ariaText"),
    link: makeNodeComponent("link"),
    ariaDescription: makeNodeComponent("ariaDescription"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicBaseComponentsMenuItem
    internalVariantProps: PlasmicBaseComponentsMenuItem__VariantProps,
    internalArgProps: PlasmicBaseComponentsMenuItem__ArgProps
  }
);

export default PlasmicBaseComponentsMenuItem;
/* prettier-ignore-end */
