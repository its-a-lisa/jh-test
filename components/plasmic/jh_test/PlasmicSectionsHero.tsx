// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: ozwBdrLzTKiW

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import BaseComponentsButton from "../../BaseComponentsButton"; // plasmic-import: Jmnl_p0DOnfd/component

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsjuWiTdOksfiv } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JUWiTdOksfiv/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicSectionsHero.module.css"; // plasmic-import: ozwBdrLzTKiW/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 24mFtLAbdat_/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: ao7Scrvo-vPs/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: b1OKjYZV5Ue9/icon

createPlasmicElementProxy;

export type PlasmicSectionsHero__VariantMembers = {};
export type PlasmicSectionsHero__VariantsArgs = {};
type VariantPropType = keyof PlasmicSectionsHero__VariantsArgs;
export const PlasmicSectionsHero__VariantProps = new Array<VariantPropType>();

export type PlasmicSectionsHero__ArgsType = {};
type ArgPropType = keyof PlasmicSectionsHero__ArgsType;
export const PlasmicSectionsHero__ArgProps = new Array<ArgPropType>();

export type PlasmicSectionsHero__OverridesType = {
  root?: Flex__<"div">;
  eyebrow?: Flex__<"div">;
  h3?: Flex__<"h3">;
  title?: Flex__<"div">;
  h1?: Flex__<"h1">;
  content?: Flex__<"div">;
  callToActionStack?: Flex__<"div">;
  svg?: Flex__<"svg">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultSectionsHeroProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionsHero__RenderFunc(props: {
  variants: PlasmicSectionsHero__VariantsArgs;
  args: PlasmicSectionsHero__ArgsType;
  overrides: PlasmicSectionsHero__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsjuWiTdOksfiv(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale"),
          [sty.rootglobal_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__c3Ehk)}
      >
        <div
          data-plasmic-name={"eyebrow"}
          data-plasmic-override={overrides.eyebrow}
          className={classNames(projectcss.all, sty.eyebrow)}
        >
          <h3
            data-plasmic-name={"h3"}
            data-plasmic-override={overrides.h3}
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3,
              {
                [sty.h3global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              }
            )}
          >
            {"Affordable Cybersecurity Training\nBuilt for All Levels"}
          </h3>
        </div>
        <div
          data-plasmic-name={"title"}
          data-plasmic-override={overrides.title}
          className={classNames(projectcss.all, sty.title)}
        >
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1,
              {
                [sty.h1global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              }
            )}
          >
            {"Learn. Hack. Conquer."}
          </h1>
        </div>
        <div
          data-plasmic-name={"content"}
          data-plasmic-override={overrides.content}
          className={classNames(projectcss.all, sty.content)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___8LXMy
            )}
          >
            {
              "Learn from the best with hands-on lessons, challenges, and CTF archives designed to elevate your skills."
            }
          </div>
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"callToActionStack"}
          data-plasmic-override={overrides.callToActionStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.callToActionStack, {
            [sty.callToActionStackglobal_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            )
          })}
        >
          <BaseComponentsButton
            className={classNames(
              "__wab_instance",
              sty.baseComponentsButton__laLfy,
              {
                [sty.baseComponentsButtonglobal_theme_dark__laLfYe6UCs]:
                  hasVariant(globalVariants, "theme", "dark")
              }
            )}
            color={"primary"}
            kind={["fill"]}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__doU5R
                )}
              >
                {"Explore  Paths"}
              </div>
            }
            size={"extraSmall"}
          />

          <BaseComponentsButton
            className={classNames(
              "__wab_instance",
              sty.baseComponentsButton__z9YkP,
              {
                [sty.baseComponentsButtonglobal_theme_dark__z9YkPe6UCs]:
                  hasVariant(globalVariants, "theme", "dark")
              }
            )}
            color={"primary"}
            end={
              <Icon38Icon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            }
            iconEnd={true}
            kind={["text"]}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__to0Zb
                )}
              >
                {"Start  Journey "}
              </div>
            }
            size={"extraSmall"}
          />
        </Stack__>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__cgUrb)}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"eager"}
          src={{
            src: "/plasmic/jh_test/images/jhtLogoPng.png",
            fullWidth: 300,
            fullHeight: 300,
            aspectRatio: undefined
          }}
        />
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "eyebrow",
    "h3",
    "title",
    "h1",
    "content",
    "callToActionStack",
    "svg",
    "img"
  ],
  eyebrow: ["eyebrow", "h3"],
  h3: ["h3"],
  title: ["title", "h1"],
  h1: ["h1"],
  content: ["content"],
  callToActionStack: ["callToActionStack", "svg"],
  svg: ["svg"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  eyebrow: "div";
  h3: "h3";
  title: "div";
  h1: "h1";
  content: "div";
  callToActionStack: "div";
  svg: "svg";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionsHero__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionsHero__VariantsArgs;
    args?: PlasmicSectionsHero__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSectionsHero__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSectionsHero__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionsHero__ArgProps,
          internalVariantPropNames: PlasmicSectionsHero__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionsHero__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionsHero";
  } else {
    func.displayName = `PlasmicSectionsHero.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionsHero = Object.assign(
  // Top-level PlasmicSectionsHero renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    eyebrow: makeNodeComponent("eyebrow"),
    h3: makeNodeComponent("h3"),
    title: makeNodeComponent("title"),
    h1: makeNodeComponent("h1"),
    content: makeNodeComponent("content"),
    callToActionStack: makeNodeComponent("callToActionStack"),
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicSectionsHero
    internalVariantProps: PlasmicSectionsHero__VariantProps,
    internalArgProps: PlasmicSectionsHero__ArgProps
  }
);

export default PlasmicSectionsHero;
/* prettier-ignore-end */
