// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: Mawy7Cqvn9eO

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LayoutPageLayout from "../../LayoutPageLayout"; // plasmic-import: Zd-Ayv7Gl3LR/component

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicResourceFaq.module.css"; // plasmic-import: Mawy7Cqvn9eO/css

createPlasmicElementProxy;

export type PlasmicResourceFaq__VariantMembers = {};
export type PlasmicResourceFaq__VariantsArgs = {};
type VariantPropType = keyof PlasmicResourceFaq__VariantsArgs;
export const PlasmicResourceFaq__VariantProps = new Array<VariantPropType>();

export type PlasmicResourceFaq__ArgsType = {};
type ArgPropType = keyof PlasmicResourceFaq__ArgsType;
export const PlasmicResourceFaq__ArgProps = new Array<ArgPropType>();

export type PlasmicResourceFaq__OverridesType = {
  root?: Flex__<typeof LayoutPageLayout>;
  h1?: Flex__<"h1">;
  h5?: Flex__<"h5">;
  text?: Flex__<"div">;
};

export interface DefaultResourceFaqProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicResourceFaq__RenderFunc(props: {
  variants: PlasmicResourceFaq__VariantsArgs;
  args: PlasmicResourceFaq__ArgsType;
  overrides: PlasmicResourceFaq__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <LayoutPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__w0Hto)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Frequently asked questions"}
            </h1>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return (() => {
                    {
                      return [
                        {
                          question: "What is Just Hacking Training (JHT)?",
                          answer:
                            "Just Hacking Training (JHT) is a platform offering focused technical training in cybersecurity for all levels. We provide various types of learning, including Courses, Upskill Challenges (UCs), Hack-Alongs (HALs), and Capture the Flag (CTF) Archives, catering to different learning preferences and skill levels."
                        },
                        {
                          question: "What types of learning does JHT offer?",
                          answer:
                            "JHT offers four main types of learning:\n\n- **Upskill Challenges (UCs):** Free, bite-sized lessons designed to be completed in 10\u201330 minutes, focusing on a single tool or concept. They include quizzes to test comprehension and require no external resources.\n\n- **Hack-Alongs (HALs):** Structured lessons with virtual labs accompanying a public YouTube video from our training developers. They allow you to follow along with the presenter, providing step-by-step instructions and screenshots, typically lasting 30\u2013120 minutes.\n\n- **Capture the Flag (CTF) Archives:** Live, playable archives of previously held CTF events, offering challenges of varying difficulty without time constraints or scoreboards. Each CTF comes with a web-based version of Kali Linux to tackle the challenges.\n\n- **Courses & Paths:** Comprehensive courses ranging from 4\u201310 hours of student time, including video instruction, quizzes, hands-on activities, and possibly homework. Courses are self-paced, with some offering live, instructor-led versions in the future."
                        },
                        {
                          question: "How can I get started with JHT?",
                          answer:
                            "If you're new to cybersecurity, we recommend starting with our free Upskill Challenges (UCs), which are short and focused lessons. For a more guided experience, our Hack-Alongs (HALs) provide step-by-step instructions alongside video content. As you progress, you can explore our Courses & Paths for more in-depth learning or tackle our Capture the Flag (CTF) Archives to test your skills."
                        },
                        {
                          question: "What are credits, and how do they work?",
                          answer:
                            "Credits allow you to access our browser-based virtual lab environment on learn.justhacking.com. Each enrollment in a course, Hack-Along, or CTF provides a set amount of credits, corresponding to the required lab time and resources. For example, a 2-hour Hack-Along provides 4 hours' worth of credits. If you run out of credits, you can purchase more on the platform."
                        },
                        {
                          question: "How can I contact JHT for support?",
                          answer:
                            "For support, you can join our JH Discord server and grab a student role by clicking 'Engage with the JHT Student Community.' From there, open a ticket in the `#jht-support` channel to speak with a member of the Just Hacking team."
                        }
                      ];
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__n5Bg8)}
                  key={currentIndex}
                >
                  <h5
                    data-plasmic-name={"h5"}
                    data-plasmic-override={overrides.h5}
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.question;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "You won't believe what happens next.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h5>
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.answer;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
              );
            })}
          </Stack__>
        </LayoutPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "h5", "text"],
  h1: ["h1"],
  h5: ["h5"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof LayoutPageLayout;
  h1: "h1";
  h5: "h5";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicResourceFaq__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicResourceFaq__VariantsArgs;
    args?: PlasmicResourceFaq__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicResourceFaq__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicResourceFaq__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicResourceFaq__ArgProps,
          internalVariantPropNames: PlasmicResourceFaq__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicResourceFaq__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResourceFaq";
  } else {
    func.displayName = `PlasmicResourceFaq.${nodeName}`;
  }
  return func;
}

export const PlasmicResourceFaq = Object.assign(
  // Top-level PlasmicResourceFaq renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    h5: makeNodeComponent("h5"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicResourceFaq
    internalVariantProps: PlasmicResourceFaq__VariantProps,
    internalArgProps: PlasmicResourceFaq__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicResourceFaq;
/* prettier-ignore-end */
