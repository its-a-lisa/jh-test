// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: D6Ikb81zwaMg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ComponentsLearningLearning from "../../ComponentsLearningLearning"; // plasmic-import: WPoBM0TGXJHg/component

import { useScreenVariants as useScreenVariantsjuWiTdOksfiv } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JUWiTdOksfiv/globalVariant
import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicComponentsLearningLearningGrid.module.css"; // plasmic-import: D6Ikb81zwaMg/css

createPlasmicElementProxy;

export type PlasmicComponentsLearningLearningGrid__VariantMembers = {
  unnamedGroupOfVariants: "_4" | "_3" | "_2" | "_1";
};
export type PlasmicComponentsLearningLearningGrid__VariantsArgs = {
  unnamedGroupOfVariants?: SingleChoiceArg<"_4" | "_3" | "_2" | "_1">;
};
type VariantPropType =
  keyof PlasmicComponentsLearningLearningGrid__VariantsArgs;
export const PlasmicComponentsLearningLearningGrid__VariantProps =
  new Array<VariantPropType>("unnamedGroupOfVariants");

export type PlasmicComponentsLearningLearningGrid__ArgsType = {
  slot1?: string;
  slot2?: string;
  slot3?: string;
  slot4?: string;
  slot5?: string;
};
type ArgPropType = keyof PlasmicComponentsLearningLearningGrid__ArgsType;
export const PlasmicComponentsLearningLearningGrid__ArgProps =
  new Array<ArgPropType>("slot1", "slot2", "slot3", "slot4", "slot5");

export type PlasmicComponentsLearningLearningGrid__OverridesType = {
  wrapper?: Flex__<"div">;
  _1?: Flex__<typeof ComponentsLearningLearning>;
  columns?: Flex__<"div">;
  _2?: Flex__<typeof ComponentsLearningLearning>;
  _3?: Flex__<typeof ComponentsLearningLearning>;
  _4?: Flex__<typeof ComponentsLearningLearning>;
  _5?: Flex__<typeof ComponentsLearningLearning>;
};

export interface DefaultComponentsLearningLearningGridProps {
  slot1?: string;
  slot2?: string;
  slot3?: string;
  slot4?: string;
  slot5?: string;
  unnamedGroupOfVariants?: SingleChoiceArg<"_4" | "_3" | "_2" | "_1">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentsLearningLearningGrid__RenderFunc(props: {
  variants: PlasmicComponentsLearningLearningGrid__VariantsArgs;
  args: PlasmicComponentsLearningLearningGrid__ArgsType;
  overrides: PlasmicComponentsLearningLearningGrid__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          slot1: "quantum-programming",
          slot2: "quantum-computing",
          slot3: "virtualization",
          slot4: "pentest-method",
          slot5: "vulnerability-management"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "unnamedGroupOfVariants",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.unnamedGroupOfVariants
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjuWiTdOksfiv(),
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"wrapper"}
      data-plasmic-override={overrides.wrapper}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.wrapper,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale"),
          [sty.wrapperunnamedGroupOfVariants__1]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "_1"
          ),
          [sty.wrapperunnamedGroupOfVariants__2]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "_2"
          ),
          [sty.wrapperunnamedGroupOfVariants__3]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "_3"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column___0SKdi, {
          [sty.columnunnamedGroupOfVariants__2___0SKdihxrap]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "_2"
          ),
          [sty.columnunnamedGroupOfVariants__3___0SKdi2Y72A]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "_3"
          )
        })}
      >
        <ComponentsLearningLearning
          data-plasmic-name={"_1"}
          data-plasmic-override={overrides._1}
          className={classNames("__wab_instance", sty._1, {
            [sty._1unnamedGroupOfVariants__2]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "_2"
            ),
            [sty._1unnamedGroupOfVariants__3]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "_3"
            )
          })}
          learningSlug={args.slot1}
          usage={"_3"}
        />

        <Stack__
          as={"div"}
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns, {
            [sty.columnsunnamedGroupOfVariants__1]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "_1"
            ),
            [sty.columnsunnamedGroupOfVariants__2]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "_2"
            ),
            [sty.columnsunnamedGroupOfVariants__3]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "_3"
            ),
            [sty.columnsunnamedGroupOfVariants__4]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "_4"
            )
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column__yi0X, {
              [sty.columnunnamedGroupOfVariants__2__yi0Xhxrap]: hasVariant(
                $state,
                "unnamedGroupOfVariants",
                "_2"
              ),
              [sty.columnunnamedGroupOfVariants__3__yi0X2Y72A]: hasVariant(
                $state,
                "unnamedGroupOfVariants",
                "_3"
              ),
              [sty.columnunnamedGroupOfVariants__4__yi0X7Wth3]: hasVariant(
                $state,
                "unnamedGroupOfVariants",
                "_4"
              )
            })}
          >
            <ComponentsLearningLearning
              data-plasmic-name={"_2"}
              data-plasmic-override={overrides._2}
              className={classNames("__wab_instance", sty._2, {
                [sty._2unnamedGroupOfVariants__2]: hasVariant(
                  $state,
                  "unnamedGroupOfVariants",
                  "_2"
                ),
                [sty._2unnamedGroupOfVariants__3]: hasVariant(
                  $state,
                  "unnamedGroupOfVariants",
                  "_3"
                )
              })}
              learningSlug={args.slot2}
              usage={"_2"}
            />

            <ComponentsLearningLearning
              data-plasmic-name={"_3"}
              data-plasmic-override={overrides._3}
              className={classNames("__wab_instance", sty._3, {
                [sty._3unnamedGroupOfVariants__2]: hasVariant(
                  $state,
                  "unnamedGroupOfVariants",
                  "_2"
                ),
                [sty._3unnamedGroupOfVariants__3]: hasVariant(
                  $state,
                  "unnamedGroupOfVariants",
                  "_3"
                ),
                [sty._3unnamedGroupOfVariants__4]: hasVariant(
                  $state,
                  "unnamedGroupOfVariants",
                  "_4"
                )
              })}
              learningSlug={args.slot3}
              usage={"_2"}
            />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column___5NKyt, {
              [sty.columnunnamedGroupOfVariants__2___5NKythxrap]: hasVariant(
                $state,
                "unnamedGroupOfVariants",
                "_2"
              ),
              [sty.columnunnamedGroupOfVariants__3___5NKyt2Y72A]: hasVariant(
                $state,
                "unnamedGroupOfVariants",
                "_3"
              ),
              [sty.columnunnamedGroupOfVariants__4___5NKyt7Wth3]: hasVariant(
                $state,
                "unnamedGroupOfVariants",
                "_4"
              )
            })}
          >
            <ComponentsLearningLearning
              data-plasmic-name={"_4"}
              data-plasmic-override={overrides._4}
              className={classNames("__wab_instance", sty._4, {
                [sty._4unnamedGroupOfVariants__2]: hasVariant(
                  $state,
                  "unnamedGroupOfVariants",
                  "_2"
                ),
                [sty._4unnamedGroupOfVariants__3]: hasVariant(
                  $state,
                  "unnamedGroupOfVariants",
                  "_3"
                )
              })}
              learningSlug={args.slot4}
              usage={"_2"}
            />

            <ComponentsLearningLearning
              data-plasmic-name={"_5"}
              data-plasmic-override={overrides._5}
              className={classNames("__wab_instance", sty._5, {
                [sty._5unnamedGroupOfVariants__2]: hasVariant(
                  $state,
                  "unnamedGroupOfVariants",
                  "_2"
                ),
                [sty._5unnamedGroupOfVariants__3]: hasVariant(
                  $state,
                  "unnamedGroupOfVariants",
                  "_3"
                ),
                [sty._5unnamedGroupOfVariants__4]: hasVariant(
                  $state,
                  "unnamedGroupOfVariants",
                  "_4"
                )
              })}
              learningSlug={args.slot5}
              usage={"_2"}
            />
          </Stack__>
        </Stack__>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  wrapper: ["wrapper", "_1", "columns", "_2", "_3", "_4", "_5"],
  _1: ["_1"],
  columns: ["columns", "_2", "_3", "_4", "_5"],
  _2: ["_2"],
  _3: ["_3"],
  _4: ["_4"],
  _5: ["_5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  wrapper: "div";
  _1: typeof ComponentsLearningLearning;
  columns: "div";
  _2: typeof ComponentsLearningLearning;
  _3: typeof ComponentsLearningLearning;
  _4: typeof ComponentsLearningLearning;
  _5: typeof ComponentsLearningLearning;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComponentsLearningLearningGrid__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComponentsLearningLearningGrid__VariantsArgs;
    args?: PlasmicComponentsLearningLearningGrid__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicComponentsLearningLearningGrid__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicComponentsLearningLearningGrid__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentsLearningLearningGrid__ArgProps,
          internalVariantPropNames:
            PlasmicComponentsLearningLearningGrid__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentsLearningLearningGrid__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "wrapper") {
    func.displayName = "PlasmicComponentsLearningLearningGrid";
  } else {
    func.displayName = `PlasmicComponentsLearningLearningGrid.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentsLearningLearningGrid = Object.assign(
  // Top-level PlasmicComponentsLearningLearningGrid renders the root element
  makeNodeComponent("wrapper"),
  {
    // Helper components rendering sub-elements
    _1: makeNodeComponent("_1"),
    columns: makeNodeComponent("columns"),
    _2: makeNodeComponent("_2"),
    _3: makeNodeComponent("_3"),
    _4: makeNodeComponent("_4"),
    _5: makeNodeComponent("_5"),

    // Metadata about props expected for PlasmicComponentsLearningLearningGrid
    internalVariantProps: PlasmicComponentsLearningLearningGrid__VariantProps,
    internalArgProps: PlasmicComponentsLearningLearningGrid__ArgProps
  }
);

export default PlasmicComponentsLearningLearningGrid;
/* prettier-ignore-end */
