// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: WPoBM0TGXJHg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowImage } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicComponentsLearningLearning.module.css"; // plasmic-import: WPoBM0TGXJHg/css

createPlasmicElementProxy;

export type PlasmicComponentsLearningLearning__VariantMembers = {
  usage: "_1" | "_2" | "_3";
  reverse: "reverse";
};
export type PlasmicComponentsLearningLearning__VariantsArgs = {
  usage?: SingleChoiceArg<"_1" | "_2" | "_3">;
  reverse?: SingleBooleanChoiceArg<"reverse">;
};
type VariantPropType = keyof PlasmicComponentsLearningLearning__VariantsArgs;
export const PlasmicComponentsLearningLearning__VariantProps =
  new Array<VariantPropType>("usage", "reverse");

export type PlasmicComponentsLearningLearning__ArgsType = {
  learningSlug?: string;
};
type ArgPropType = keyof PlasmicComponentsLearningLearning__ArgsType;
export const PlasmicComponentsLearningLearning__ArgProps =
  new Array<ArgPropType>("learningSlug");

export type PlasmicComponentsLearningLearning__OverridesType = {
  wrapper?: Flex__<"div">;
  stack?: Flex__<"div">;
  body?: Flex__<"div">;
  cmsEntryImage?: Flex__<typeof CmsRowImage>;
  img?: Flex__<typeof PlasmicImg__>;
  title?: Flex__<"div">;
  h6?: Flex__<"h6">;
  author?: Flex__<"div">;
  cmsEntryField?: Flex__<typeof CmsRowField>;
  description?: Flex__<"div">;
};

export interface DefaultComponentsLearningLearningProps {
  learningSlug?: string;
  usage?: SingleChoiceArg<"_1" | "_2" | "_3">;
  reverse?: SingleBooleanChoiceArg<"reverse">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentsLearningLearning__RenderFunc(props: {
  variants: PlasmicComponentsLearningLearning__VariantsArgs;
  args: PlasmicComponentsLearningLearning__ArgsType;
  overrides: PlasmicComponentsLearningLearning__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          learningSlug: "aircrack-ng"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "usage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.usage
      },
      {
        path: "reverse",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.reverse
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <div
      data-plasmic-name={"wrapper"}
      data-plasmic-override={overrides.wrapper}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.wrapper,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale"),
          [sty.wrapperusage__1]: hasVariant($state, "usage", "_1"),
          [sty.wrapperusage__2]: hasVariant($state, "usage", "_2"),
          [sty.wrapperusage__3]: hasVariant($state, "usage", "_3")
        }
      )}
    >
      <CmsQueryRepeater
        className={classNames("__wab_instance", sty.cmsDataFetcher___15Hp, {
          [sty.cmsDataFetcherusage__1___15HpP584R]: hasVariant(
            $state,
            "usage",
            "_1"
          )
        })}
        desc={false}
        emptyMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9GlQd
                )}
              >
                {"No matching published entries found."}
              </div>
            )}
          </DataCtxReader__>
        }
        filterField={"slug"}
        filterValue={(() => {
          try {
            return $props.learningSlug;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        forceEmptyState={false}
        forceLoadingState={false}
        limit={1}
        loadingMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nvVqx
                )}
              >
                {"Loading..."}
              </div>
            )}
          </DataCtxReader__>
        }
        noAutoRepeat={false}
        noLayout={false}
        table={"learning"}
        useDraft={false}
      >
        <DataCtxReader__>
          {$ctx => (
            <div
              data-plasmic-name={"stack"}
              data-plasmic-override={overrides.stack}
              className={classNames(projectcss.all, sty.stack, {
                [sty.stackreverse]: hasVariant($state, "reverse", "reverse"),
                [sty.stackusage__1]: hasVariant($state, "usage", "_1"),
                [sty.stackusage__2]: hasVariant($state, "usage", "_2")
              })}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return `/learning/${$ctx.plasmicCmsLearningItem.data.slug}`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
            >
              <div
                data-plasmic-name={"body"}
                data-plasmic-override={overrides.body}
                className={classNames(projectcss.all, sty.body, {
                  [sty.bodyusage__1]: hasVariant($state, "usage", "_1"),
                  [sty.bodyusage__2]: hasVariant($state, "usage", "_2")
                })}
              >
                <CmsQueryRepeater
                  className={classNames(
                    "__wab_instance",
                    sty.cmsDataFetcher___55Mvx,
                    {
                      [sty.cmsDataFetcherusage__1___55MvxP584R]: hasVariant(
                        $state,
                        "usage",
                        "_1"
                      )
                    }
                  )}
                  desc={false}
                  emptyMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lHqAd
                          )}
                        >
                          {"No matching published entries found."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  filterField={"_id"}
                  filterValue={(() => {
                    try {
                      return $ctx.plasmicCmsLearningItem.data.thumbnail;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  forceEmptyState={false}
                  forceLoadingState={false}
                  limit={0}
                  loadingMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5ScMr
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  noAutoRepeat={false}
                  noLayout={false}
                  table={"media"}
                  useDraft={false}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rt5V,
                          {
                            [sty.freeBoxusage__1__rt5VP584R]: hasVariant(
                              $state,
                              "usage",
                              "_1"
                            )
                          }
                        )}
                      >
                        <CmsRowImage
                          data-plasmic-name={"cmsEntryImage"}
                          data-plasmic-override={overrides.cmsEntryImage}
                          className={classNames(
                            "__wab_instance",
                            sty.cmsEntryImage,
                            {
                              [sty.cmsEntryImageusage__1]: hasVariant(
                                $state,
                                "usage",
                                "_1"
                              )
                            }
                          )}
                          srcProp={"src"}
                          table={"media"}
                        >
                          <PlasmicImg__
                            data-plasmic-name={"img"}
                            data-plasmic-override={overrides.img}
                            alt={""}
                            className={classNames(sty.img, {
                              [sty.imgusage__1]: hasVariant(
                                $state,
                                "usage",
                                "_1"
                              ),
                              [sty.imgusage__2]: hasVariant(
                                $state,
                                "usage",
                                "_2"
                              ),
                              [sty.imgusage__3]: hasVariant(
                                $state,
                                "usage",
                                "_3"
                              )
                            })}
                            displayHeight={"100%"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"100%"}
                            height={``}
                            loading={"eager"}
                            src={
                              "https://studio.plasmic.app/static/img/placeholder-full.png"
                            }
                          />
                        </CmsRowImage>
                      </div>
                    )}
                  </DataCtxReader__>
                </CmsQueryRepeater>
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                hasGap={true}
                className={classNames(projectcss.all, sty.title, {
                  [sty.titlereverse]: hasVariant($state, "reverse", "reverse"),
                  [sty.titleusage__1]: hasVariant($state, "usage", "_1"),
                  [sty.titleusage__2]: hasVariant($state, "usage", "_2")
                })}
              >
                <h6
                  data-plasmic-name={"h6"}
                  data-plasmic-override={overrides.h6}
                  className={classNames(
                    projectcss.all,
                    projectcss.h6,
                    projectcss.__wab_text,
                    sty.h6,
                    {
                      [sty.h6usage__1]: hasVariant($state, "usage", "_1"),
                      [sty.h6usage__2]: hasVariant($state, "usage", "_2")
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.plasmicCmsLearningItem.identifier;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "John Hammond";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h6>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"author"}
                data-plasmic-override={overrides.author}
                hasGap={true}
                className={classNames(projectcss.all, sty.author, {
                  [sty.authorusage__1]: hasVariant($state, "usage", "_1"),
                  [sty.authorusage__2]: hasVariant($state, "usage", "_2"),
                  [sty.authorusage__3]: hasVariant($state, "usage", "_3")
                })}
              >
                <CmsQueryRepeater
                  className={classNames(
                    "__wab_instance",
                    sty.cmsDataFetcher__zfw3D,
                    {
                      [sty.cmsDataFetcherusage__1__zfw3DP584R]: hasVariant(
                        $state,
                        "usage",
                        "_1"
                      )
                    }
                  )}
                  desc={false}
                  emptyMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__q50JG
                          )}
                        >
                          {"No matching published entries found."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  fields={["name"]}
                  filterField={"_id"}
                  filterValue={(() => {
                    try {
                      return $ctx.plasmicCmsLearningItem.data.author;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  forceEmptyState={false}
                  forceLoadingState={false}
                  limit={1}
                  loadingMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0KRrU
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  noAutoRepeat={false}
                  noLayout={false}
                  table={
                    hasVariant($state, "usage", "_1") ? "author" : "author"
                  }
                  useDraft={false}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kqOD,
                          {
                            [sty.freeBoxusage__1__kqODp584R]: hasVariant(
                              $state,
                              "usage",
                              "_1"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__smBUj,
                            {
                              [sty.textusage__1__smBUjP584R]: hasVariant(
                                $state,
                                "usage",
                                "_1"
                              ),
                              [sty.textusage__2__smBUjWt4W]: hasVariant(
                                $state,
                                "usage",
                                "_2"
                              )
                            }
                          )}
                        >
                          {"By: "}
                        </div>
                        <CmsRowField
                          data-plasmic-name={"cmsEntryField"}
                          data-plasmic-override={overrides.cmsEntryField}
                          className={classNames(
                            "__wab_instance",
                            sty.cmsEntryField,
                            {
                              [sty.cmsEntryFieldusage__1]: hasVariant(
                                $state,
                                "usage",
                                "_1"
                              ),
                              [sty.cmsEntryFieldusage__2]: hasVariant(
                                $state,
                                "usage",
                                "_2"
                              )
                            }
                          )}
                          field={"name"}
                          table={"author"}
                          themeResetClassName={classNames(
                            projectcss.root_reset,
                            projectcss.root_reset_tags,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_17_sds_foundation_global_css.plasmic_tokens,
                            plasmic_17_sds_foundation_system_css.plasmic_tokens,
                            {
                              [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
                                hasVariant(
                                  globalVariants,
                                  "theme",
                                  "darkGrayscale"
                                ),
                              [plasmic_17_sds_foundation_global_css.global_theme_dark]:
                                hasVariant(globalVariants, "theme", "dark"),
                              [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
                                hasVariant(globalVariants, "theme", "grayscale")
                            }
                          )}
                        />
                      </Stack__>
                    )}
                  </DataCtxReader__>
                </CmsQueryRepeater>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"description"}
                data-plasmic-override={overrides.description}
                hasGap={true}
                className={classNames(projectcss.all, sty.description, {
                  [sty.descriptionreverse]: hasVariant(
                    $state,
                    "reverse",
                    "reverse"
                  ),
                  [sty.descriptionusage__1]: hasVariant($state, "usage", "_1"),
                  [sty.descriptionusage__2]: hasVariant($state, "usage", "_2"),
                  [sty.descriptionusage__3]: hasVariant($state, "usage", "_3")
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8VU21,
                    {
                      [sty.textreverse___8VU21SROuB]: hasVariant(
                        $state,
                        "reverse",
                        "reverse"
                      ),
                      [sty.textusage__1___8VU21P584R]: hasVariant(
                        $state,
                        "usage",
                        "_1"
                      ),
                      [sty.textusage__2___8VU21Wt4W]: hasVariant(
                        $state,
                        "usage",
                        "_2"
                      ),
                      [sty.textusage__3___8VU21QJpOf]: hasVariant(
                        $state,
                        "usage",
                        "_3"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.plasmicCmsLearningItem.data.description;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return '"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."';
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
            </div>
          )}
        </DataCtxReader__>
      </CmsQueryRepeater>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  wrapper: [
    "wrapper",
    "stack",
    "body",
    "cmsEntryImage",
    "img",
    "title",
    "h6",
    "author",
    "cmsEntryField",
    "description"
  ],
  stack: [
    "stack",
    "body",
    "cmsEntryImage",
    "img",
    "title",
    "h6",
    "author",
    "cmsEntryField",
    "description"
  ],
  body: ["body", "cmsEntryImage", "img"],
  cmsEntryImage: ["cmsEntryImage", "img"],
  img: ["img"],
  title: ["title", "h6"],
  h6: ["h6"],
  author: ["author", "cmsEntryField"],
  cmsEntryField: ["cmsEntryField"],
  description: ["description"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  wrapper: "div";
  stack: "div";
  body: "div";
  cmsEntryImage: typeof CmsRowImage;
  img: typeof PlasmicImg__;
  title: "div";
  h6: "h6";
  author: "div";
  cmsEntryField: typeof CmsRowField;
  description: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComponentsLearningLearning__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComponentsLearningLearning__VariantsArgs;
    args?: PlasmicComponentsLearningLearning__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicComponentsLearningLearning__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicComponentsLearningLearning__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentsLearningLearning__ArgProps,
          internalVariantPropNames:
            PlasmicComponentsLearningLearning__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentsLearningLearning__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "wrapper") {
    func.displayName = "PlasmicComponentsLearningLearning";
  } else {
    func.displayName = `PlasmicComponentsLearningLearning.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentsLearningLearning = Object.assign(
  // Top-level PlasmicComponentsLearningLearning renders the root element
  makeNodeComponent("wrapper"),
  {
    // Helper components rendering sub-elements
    stack: makeNodeComponent("stack"),
    body: makeNodeComponent("body"),
    cmsEntryImage: makeNodeComponent("cmsEntryImage"),
    img: makeNodeComponent("img"),
    title: makeNodeComponent("title"),
    h6: makeNodeComponent("h6"),
    author: makeNodeComponent("author"),
    cmsEntryField: makeNodeComponent("cmsEntryField"),
    description: makeNodeComponent("description"),

    // Metadata about props expected for PlasmicComponentsLearningLearning
    internalVariantProps: PlasmicComponentsLearningLearning__VariantProps,
    internalArgProps: PlasmicComponentsLearningLearning__ArgProps
  }
);

export default PlasmicComponentsLearningLearning;
/* prettier-ignore-end */
