// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: mKAIpkMCSmyv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseSelect } from "@plasmicpkgs/react-aria/skinny/registerSelect";
import BaseComponentsLabel from "../../BaseComponentsLabel"; // plasmic-import: fiT5GDRY-3nn/component
import { BaseButton } from "@plasmicpkgs/react-aria/skinny/registerButton";
import { BaseSelectValue } from "@plasmicpkgs/react-aria/skinny/registerSelect";
import UnusedComponentsMenuPopover from "../../UnusedComponentsMenuPopover"; // plasmic-import: P0poc5o2GlF7/component
import BaseComponentsMenuItem from "../../BaseComponentsMenuItem"; // plasmic-import: FENpTl10T9dh/component
import UnusedComponentsMenuSection from "../../UnusedComponentsMenuSection"; // plasmic-import: 6u5EPA4kgEpc/component

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicBaseComponentsSelect.module.css"; // plasmic-import: mKAIpkMCSmyv/css

import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: ao7Scrvo-vPs/icon

createPlasmicElementProxy;

export type PlasmicBaseComponentsSelect__VariantMembers = {
  type: "soft" | "plain";
};
export type PlasmicBaseComponentsSelect__VariantsArgs = {
  type?: SingleChoiceArg<"soft" | "plain">;
};
type VariantPropType = keyof PlasmicBaseComponentsSelect__VariantsArgs;
export const PlasmicBaseComponentsSelect__VariantProps =
  new Array<VariantPropType>("type");

export type PlasmicBaseComponentsSelect__ArgsType = {
  onChange?: (val: string) => void;
  placeholder?: string;
  showLabel?: boolean;
  initialSelectedValue?: "Dynamic options";
  disabled?: boolean;
  ariaLabel?: string;
  label?: React.ReactNode;
  children?: React.ReactNode;
  items?: React.ReactNode;
};
type ArgPropType = keyof PlasmicBaseComponentsSelect__ArgsType;
export const PlasmicBaseComponentsSelect__ArgProps = new Array<ArgPropType>(
  "onChange",
  "placeholder",
  "showLabel",
  "initialSelectedValue",
  "disabled",
  "ariaLabel",
  "label",
  "children",
  "items"
);

export type PlasmicBaseComponentsSelect__OverridesType = {
  ariaSelect?: Flex__<typeof BaseSelect>;
  baseComponentsLabel?: Flex__<typeof BaseComponentsLabel>;
  ariaButton?: Flex__<typeof BaseButton>;
  ariaSelectedValue?: Flex__<typeof BaseSelectValue>;
  freeBox?: Flex__<"div">;
  svg?: Flex__<"svg">;
  unusedComponentsMenuPopover?: Flex__<typeof UnusedComponentsMenuPopover>;
};

export interface DefaultBaseComponentsSelectProps {
  onChange?: (val: string) => void;
  placeholder?: string;
  showLabel?: boolean;
  initialSelectedValue?: "Dynamic options";
  disabled?: boolean;
  ariaLabel?: string;
  label?: React.ReactNode;
  children?: React.ReactNode;
  items?: React.ReactNode;
  type?: SingleChoiceArg<"soft" | "plain">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBaseComponentsSelect__RenderFunc(props: {
  variants: PlasmicBaseComponentsSelect__VariantsArgs;
  args: PlasmicBaseComponentsSelect__ArgsType;
  overrides: PlasmicBaseComponentsSelect__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          placeholder: "Select an item",
          showLabel: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "ariaSelect.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "ariaSelect.selectedValue",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props["initialSelectedValue"],

        onChangeProp: "onChange"
      },
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  const [$ccVariants, setDollarCcVariants] = React.useState<
    Record<string, boolean>
  >({
    focused: false,
    focusVisible: false,
    disabled: false
  });
  const updateVariant = React.useCallback(
    (changes: Record<string, boolean>) => {
      setDollarCcVariants(prev => {
        if (!Object.keys(changes).some(k => prev[k] !== changes[k])) {
          return prev;
        }
        return { ...prev, ...changes };
      });
    },
    []
  );

  return (
    <BaseSelect
      data-plasmic-name={"ariaSelect"}
      data-plasmic-override={overrides.ariaSelect}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      aria-label={args.ariaLabel}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.ariaSelect,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale"),
          [sty.ariaSelecttype_plain]: hasVariant($state, "type", "plain"),
          [sty.ariaSelecttype_soft]: hasVariant($state, "type", "soft")
        }
      )}
      defaultSelectedKey={args.initialSelectedValue}
      isDisabled={args.disabled}
      isOpen={generateStateValueProp($state, ["ariaSelect", "isOpen"])}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["ariaSelect", "isOpen"]).apply(
          null,
          eventArgs
        );
      }}
      onSelectionChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, [
          "ariaSelect",
          "selectedValue"
        ]).apply(null, eventArgs);
      }}
      plasmicUpdateVariant={updateVariant}
      selectedKey={generateStateValueProp($state, [
        "ariaSelect",
        "selectedValue"
      ])}
    >
      {(() => {
        try {
          return $props.showLabel;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <BaseComponentsLabel
          data-plasmic-name={"baseComponentsLabel"}
          data-plasmic-override={overrides.baseComponentsLabel}
          className={classNames("__wab_instance", sty.baseComponentsLabel)}
        >
          {renderPlasmicSlot({
            defaultContents: "Label",
            value: args.label
          })}
        </BaseComponentsLabel>
      ) : null}
      <BaseButton
        data-plasmic-name={"ariaButton"}
        data-plasmic-override={overrides.ariaButton}
        className={classNames("__wab_instance", sty.ariaButton, {
          [sty.ariaButtontype_plain]: hasVariant($state, "type", "plain"),
          [sty.ariaButtontype_soft]: hasVariant($state, "type", "soft")
        })}
      >
        <BaseSelectValue
          data-plasmic-name={"ariaSelectedValue"}
          data-plasmic-override={overrides.ariaSelectedValue}
          className={classNames("__wab_instance", sty.ariaSelectedValue)}
          customize={true}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            {renderPlasmicSlot({
              defaultContents: "Select Item",
              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </div>
        </BaseSelectValue>
        <ChevronDownIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      </BaseButton>
      <UnusedComponentsMenuPopover
        data-plasmic-name={"unusedComponentsMenuPopover"}
        data-plasmic-override={overrides.unusedComponentsMenuPopover}
        className={classNames(
          "__wab_instance",
          sty.unusedComponentsMenuPopover,
          {
            [sty.unusedComponentsMenuPopovertype_plain]: hasVariant(
              $state,
              "type",
              "plain"
            )
          }
        )}
        menuItems={renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <BaseComponentsMenuItem
                className={classNames(
                  "__wab_instance",
                  sty.baseComponentsMenuItem__ofapn
                )}
                value={"item1"}
              />

              <BaseComponentsMenuItem
                className={classNames(
                  "__wab_instance",
                  sty.baseComponentsMenuItem__y7Ab
                )}
                label={"Item 2"}
                value={"item2"}
              />

              <BaseComponentsMenuItem
                className={classNames(
                  "__wab_instance",
                  sty.baseComponentsMenuItem___9TnOg
                )}
                label={"Item 3"}
                value={"item3"}
              />

              <UnusedComponentsMenuSection
                className={classNames(
                  "__wab_instance",
                  sty.unusedComponentsMenuSection___79Gab
                )}
                items={
                  <React.Fragment>
                    <BaseComponentsMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.baseComponentsMenuItem__he3Cj
                      )}
                      label={"Section Item 1"}
                      value={"section-item-1"}
                    />

                    <BaseComponentsMenuItem
                      label={"Section Item 2"}
                      value={"section-item-2"}
                    />

                    <BaseComponentsMenuItem
                      label={"Section Item 3"}
                      value={"section-item-3"}
                    />
                  </React.Fragment>
                }
              />
            </React.Fragment>
          ),
          value: args.items
        })}
        offset={2}
      />
    </BaseSelect>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  ariaSelect: [
    "ariaSelect",
    "baseComponentsLabel",
    "ariaButton",
    "ariaSelectedValue",
    "freeBox",
    "svg",
    "unusedComponentsMenuPopover"
  ],
  baseComponentsLabel: ["baseComponentsLabel"],
  ariaButton: ["ariaButton", "ariaSelectedValue", "freeBox", "svg"],
  ariaSelectedValue: ["ariaSelectedValue", "freeBox"],
  freeBox: ["freeBox"],
  svg: ["svg"],
  unusedComponentsMenuPopover: ["unusedComponentsMenuPopover"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  ariaSelect: typeof BaseSelect;
  baseComponentsLabel: typeof BaseComponentsLabel;
  ariaButton: typeof BaseButton;
  ariaSelectedValue: typeof BaseSelectValue;
  freeBox: "div";
  svg: "svg";
  unusedComponentsMenuPopover: typeof UnusedComponentsMenuPopover;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBaseComponentsSelect__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBaseComponentsSelect__VariantsArgs;
    args?: PlasmicBaseComponentsSelect__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBaseComponentsSelect__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBaseComponentsSelect__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBaseComponentsSelect__ArgProps,
          internalVariantPropNames: PlasmicBaseComponentsSelect__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBaseComponentsSelect__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ariaSelect") {
    func.displayName = "PlasmicBaseComponentsSelect";
  } else {
    func.displayName = `PlasmicBaseComponentsSelect.${nodeName}`;
  }
  return func;
}

export const PlasmicBaseComponentsSelect = Object.assign(
  // Top-level PlasmicBaseComponentsSelect renders the root element
  makeNodeComponent("ariaSelect"),
  {
    // Helper components rendering sub-elements
    baseComponentsLabel: makeNodeComponent("baseComponentsLabel"),
    ariaButton: makeNodeComponent("ariaButton"),
    ariaSelectedValue: makeNodeComponent("ariaSelectedValue"),
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),
    unusedComponentsMenuPopover: makeNodeComponent(
      "unusedComponentsMenuPopover"
    ),

    // Metadata about props expected for PlasmicBaseComponentsSelect
    internalVariantProps: PlasmicBaseComponentsSelect__VariantProps,
    internalArgProps: PlasmicBaseComponentsSelect__ArgProps
  }
);

export default PlasmicBaseComponentsSelect;
/* prettier-ignore-end */
