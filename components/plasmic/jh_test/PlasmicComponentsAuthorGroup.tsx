// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: hO9m_SxMqfWL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowImage } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicComponentsAuthorGroup.module.css"; // plasmic-import: hO9m_SxMqfWL/css

createPlasmicElementProxy;

export type PlasmicComponentsAuthorGroup__VariantMembers = {};
export type PlasmicComponentsAuthorGroup__VariantsArgs = {};
type VariantPropType = keyof PlasmicComponentsAuthorGroup__VariantsArgs;
export const PlasmicComponentsAuthorGroup__VariantProps =
  new Array<VariantPropType>();

export type PlasmicComponentsAuthorGroup__ArgsType = {
  authorName?: string;
};
type ArgPropType = keyof PlasmicComponentsAuthorGroup__ArgsType;
export const PlasmicComponentsAuthorGroup__ArgProps = new Array<ArgPropType>(
  "authorName"
);

export type PlasmicComponentsAuthorGroup__OverridesType = {
  root?: Flex__<"div">;
  cmsEntryImage?: Flex__<typeof CmsRowImage>;
  img?: Flex__<typeof PlasmicImg__>;
  cmsEntryField?: Flex__<typeof CmsRowField>;
};

export interface DefaultComponentsAuthorGroupProps {
  authorName?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentsAuthorGroup__RenderFunc(props: {
  variants: PlasmicComponentsAuthorGroup__VariantsArgs;
  args: PlasmicComponentsAuthorGroup__ArgsType;
  overrides: PlasmicComponentsAuthorGroup__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale")
        }
      )}
    >
      <CmsQueryRepeater
        className={classNames("__wab_instance", sty.cmsDataFetcher___6TaeD)}
        desc={false}
        emptyMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wjCfm
                )}
              >
                {"No matching published entries found."}
              </div>
            )}
          </DataCtxReader__>
        }
        filterField={"name"}
        filterValue={args.authorName}
        forceEmptyState={false}
        forceLoadingState={false}
        limit={0}
        loadingMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hkaL0
                )}
              >
                {"Loading..."}
              </div>
            )}
          </DataCtxReader__>
        }
        noAutoRepeat={false}
        noLayout={false}
        table={"author"}
        useDraft={false}
      >
        <DataCtxReader__>
          {$ctx => (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__eOjSz)}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return `/author/${$ctx.plasmicCmsAuthorItem.data.slug}`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
            >
              <div className={classNames(projectcss.all, sty.freeBox__jz0R4)}>
                <CmsQueryRepeater
                  className={classNames(
                    "__wab_instance",
                    sty.cmsDataFetcher__qypAq
                  )}
                  desc={false}
                  emptyMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__h1DrQ
                          )}
                        >
                          {"No matching published entries found."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  filterField={"_id"}
                  filterValue={(() => {
                    try {
                      return $ctx.plasmicCmsAuthorItem.data.pic;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  forceEmptyState={false}
                  forceLoadingState={false}
                  limit={0}
                  loadingMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ibphc
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  noAutoRepeat={false}
                  noLayout={false}
                  table={"media"}
                  useDraft={false}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__r7Yya
                        )}
                      >
                        <CmsRowImage
                          data-plasmic-name={"cmsEntryImage"}
                          data-plasmic-override={overrides.cmsEntryImage}
                          className={classNames(
                            "__wab_instance",
                            sty.cmsEntryImage
                          )}
                          srcProp={"src"}
                          table={"media"}
                        >
                          <PlasmicImg__
                            data-plasmic-name={"img"}
                            data-plasmic-override={overrides.img}
                            alt={""}
                            className={classNames(sty.img)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"80px"}
                            src={
                              "https://studio.plasmic.app/static/img/placeholder-full.png"
                            }
                          />
                        </CmsRowImage>
                      </div>
                    )}
                  </DataCtxReader__>
                </CmsQueryRepeater>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__qWL)}>
                <CmsRowField
                  data-plasmic-name={"cmsEntryField"}
                  data-plasmic-override={overrides.cmsEntryField}
                  className={classNames("__wab_instance", sty.cmsEntryField)}
                  field={"name"}
                  themeResetClassName={classNames(
                    projectcss.root_reset,
                    projectcss.root_reset_tags,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_17_sds_foundation_global_css.plasmic_tokens,
                    plasmic_17_sds_foundation_system_css.plasmic_tokens,
                    {
                      [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
                        hasVariant(globalVariants, "theme", "darkGrayscale"),
                      [plasmic_17_sds_foundation_global_css.global_theme_dark]:
                        hasVariant(globalVariants, "theme", "dark"),
                      [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
                        hasVariant(globalVariants, "theme", "grayscale")
                    }
                  )}
                />
              </div>
            </Stack__>
          )}
        </DataCtxReader__>
      </CmsQueryRepeater>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "cmsEntryImage", "img", "cmsEntryField"],
  cmsEntryImage: ["cmsEntryImage", "img"],
  img: ["img"],
  cmsEntryField: ["cmsEntryField"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  cmsEntryImage: typeof CmsRowImage;
  img: typeof PlasmicImg__;
  cmsEntryField: typeof CmsRowField;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComponentsAuthorGroup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComponentsAuthorGroup__VariantsArgs;
    args?: PlasmicComponentsAuthorGroup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicComponentsAuthorGroup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicComponentsAuthorGroup__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentsAuthorGroup__ArgProps,
          internalVariantPropNames: PlasmicComponentsAuthorGroup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentsAuthorGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponentsAuthorGroup";
  } else {
    func.displayName = `PlasmicComponentsAuthorGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentsAuthorGroup = Object.assign(
  // Top-level PlasmicComponentsAuthorGroup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cmsEntryImage: makeNodeComponent("cmsEntryImage"),
    img: makeNodeComponent("img"),
    cmsEntryField: makeNodeComponent("cmsEntryField"),

    // Metadata about props expected for PlasmicComponentsAuthorGroup
    internalVariantProps: PlasmicComponentsAuthorGroup__VariantProps,
    internalArgProps: PlasmicComponentsAuthorGroup__ArgProps
  }
);

export default PlasmicComponentsAuthorGroup;
/* prettier-ignore-end */
