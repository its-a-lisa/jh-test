// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: N7GfBVMYPVHR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LayoutPageLayout from "../../LayoutPageLayout"; // plasmic-import: Zd-Ayv7Gl3LR/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowImage } from "@plasmicpkgs/plasmic-cms";
import BaseComponentsSocialIcons from "../../BaseComponentsSocialIcons"; // plasmic-import: fANKuPlo2Cc-/component
import { TiptapWrapper } from "@plasmicpkgs/tiptap/skinny/registerTiptap";

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicResourceBlog.module.css"; // plasmic-import: N7GfBVMYPVHR/css

createPlasmicElementProxy;

export type PlasmicResourceBlog__VariantMembers = {};
export type PlasmicResourceBlog__VariantsArgs = {};
type VariantPropType = keyof PlasmicResourceBlog__VariantsArgs;
export const PlasmicResourceBlog__VariantProps = new Array<VariantPropType>();

export type PlasmicResourceBlog__ArgsType = {};
type ArgPropType = keyof PlasmicResourceBlog__ArgsType;
export const PlasmicResourceBlog__ArgProps = new Array<ArgPropType>();

export type PlasmicResourceBlog__OverridesType = {
  root?: Flex__<typeof LayoutPageLayout>;
  columns?: Flex__<"div">;
  column?: Flex__<"div">;
  h1?: Flex__<"h1">;
  cmsEntryImage?: Flex__<typeof CmsRowImage>;
  img?: Flex__<typeof PlasmicImg__>;
  baseComponentsSocialIcons?: Flex__<typeof BaseComponentsSocialIcons>;
  h3?: Flex__<"h3">;
  tiptapRichTextEditor?: Flex__<typeof TiptapWrapper>;
};

export interface DefaultResourceBlogProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicResourceBlog__RenderFunc(props: {
  variants: PlasmicResourceBlog__VariantsArgs;
  args: PlasmicResourceBlog__ArgsType;
  overrides: PlasmicResourceBlog__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tiptapRichTextEditor.content",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <LayoutPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <CmsQueryRepeater
            className={classNames("__wab_instance", sty.cmsDataFetcher__zLthl)}
            desc={false}
            emptyMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qDn2R
                    )}
                  >
                    {"No matching published entries found."}
                  </div>
                )}
              </DataCtxReader__>
            }
            forceEmptyState={false}
            forceLoadingState={false}
            limit={0}
            loadingMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__afIjy
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </DataCtxReader__>
            }
            noAutoRepeat={false}
            noLayout={false}
            table={"blog"}
            useDraft={false}
          >
            <DataCtxReader__>
              {$ctx => (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___1FV9S)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"column"}
                      data-plasmic-override={overrides.column}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.column)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zCjQt
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ahBpy
                          )}
                        >
                          <h1
                            data-plasmic-name={"h1"}
                            data-plasmic-override={overrides.h1}
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.plasmicCmsBlogItem.data.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "John Hammond";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h1>
                        </Stack__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__e5RGi
                        )}
                      >
                        <CmsQueryRepeater
                          className={classNames(
                            "__wab_instance",
                            sty.cmsDataFetcher__b1T9
                          )}
                          desc={false}
                          emptyMessage={
                            <DataCtxReader__>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__d7QMp
                                  )}
                                >
                                  {"No matching published entries found."}
                                </div>
                              )}
                            </DataCtxReader__>
                          }
                          filterField={"_id"}
                          filterValue={(() => {
                            try {
                              return $ctx.plasmicCmsBlogItem.data.thumbnail;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          forceEmptyState={false}
                          forceLoadingState={false}
                          limit={0}
                          loadingMessage={
                            <DataCtxReader__>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__saQu
                                  )}
                                >
                                  {"Loading..."}
                                </div>
                              )}
                            </DataCtxReader__>
                          }
                          noAutoRepeat={false}
                          noLayout={false}
                          table={"media"}
                          useDraft={false}
                        >
                          <DataCtxReader__>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__woLih
                                )}
                              >
                                <CmsRowImage
                                  data-plasmic-name={"cmsEntryImage"}
                                  data-plasmic-override={
                                    overrides.cmsEntryImage
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.cmsEntryImage
                                  )}
                                  srcProp={"src"}
                                  table={"media"}
                                >
                                  <PlasmicImg__
                                    data-plasmic-name={"img"}
                                    data-plasmic-override={overrides.img}
                                    alt={""}
                                    className={classNames(sty.img)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"none"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"600px"}
                                    src={
                                      "https://studio.plasmic.app/static/img/placeholder-full.png"
                                    }
                                  />
                                </CmsRowImage>
                              </div>
                            )}
                          </DataCtxReader__>
                        </CmsQueryRepeater>
                        <BaseComponentsSocialIcons
                          data-plasmic-name={"baseComponentsSocialIcons"}
                          data-plasmic-override={
                            overrides.baseComponentsSocialIcons
                          }
                          blueskyUsername={(() => {
                            try {
                              return $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                "social media accounts"
                              ].find(
                                account => account["account type"] === "bluesky"
                              )
                                ? $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                    "social media accounts"
                                  ].find(
                                    account =>
                                      account["account type"] === "bluesky"
                                  )["account lnk"]
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          className={classNames(
                            "__wab_instance",
                            sty.baseComponentsSocialIcons
                          )}
                          discordServer={(() => {
                            try {
                              return $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                "social media accounts"
                              ].find(
                                account => account["account type"] === "discord"
                              )
                                ? $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                    "social media accounts"
                                  ].find(
                                    account =>
                                      account["account type"] === "discord"
                                  )["account lnk"]
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          facebookProfile={(() => {
                            try {
                              return $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                "social media accounts"
                              ].find(
                                account =>
                                  account["account type"] === "facebook"
                              )
                                ? $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                    "social media accounts"
                                  ].find(
                                    account =>
                                      account["account type"] === "facebook"
                                  )["account lnk"]
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          githubUsername={(() => {
                            try {
                              return $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                "social media accounts"
                              ].find(
                                account => account["account type"] === "github"
                              )
                                ? $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                    "social media accounts"
                                  ].find(
                                    account =>
                                      account["account type"] === "github"
                                  )["account lnk"]
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          instagramUsername={(() => {
                            try {
                              return $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                "social media accounts"
                              ].find(
                                account =>
                                  account["account type"] === "instagram"
                              )
                                ? $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                    "social media accounts"
                                  ].find(
                                    account =>
                                      account["account type"] === "instagram"
                                  )["account lnk"]
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          linkedinProfile={(() => {
                            try {
                              return $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                "social media accounts"
                              ].find(
                                account =>
                                  account["account type"] === "linkedin"
                              )
                                ? $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                    "social media accounts"
                                  ].find(
                                    account =>
                                      account["account type"] === "linkedin"
                                  )["account lnk"]
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          mastadonUsername={(() => {
                            try {
                              return $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                "social media accounts"
                              ].find(
                                account =>
                                  account["account type"] === "mastadon"
                              )
                                ? $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                    "social media accounts"
                                  ].find(
                                    account =>
                                      account["account type"] === "mastadon"
                                  )["account lnk"]
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          mediumProfile={(() => {
                            try {
                              return $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                "social media accounts"
                              ].find(
                                account => account["account type"] === "medium"
                              )
                                ? $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                    "social media accounts"
                                  ].find(
                                    account =>
                                      account["account type"] === "medium"
                                  )["account lnk"]
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          socialItem={(() => {
                            try {
                              return $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                "social media accounts"
                              ].map(account => account["account type"]);
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          spotifyPage={(() => {
                            try {
                              return $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                "social media accounts"
                              ].find(
                                account => account["account type"] === "spotify"
                              )
                                ? $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                    "social media accounts"
                                  ].find(
                                    account =>
                                      account["account type"] === "spotify"
                                  )["account lnk"]
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          threadsUsername={(() => {
                            try {
                              return $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                "social media accounts"
                              ].find(
                                account => account["account type"] === "threads"
                              )
                                ? $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                    "social media accounts"
                                  ].find(
                                    account =>
                                      account["account type"] === "threads"
                                  )["account lnk"]
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          twitchServer={(() => {
                            try {
                              return $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                "social media accounts"
                              ].find(
                                account => account["account type"] === "twitch"
                              )
                                ? $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                    "social media accounts"
                                  ].find(
                                    account =>
                                      account["account type"] === "twitch"
                                  )["account lnk"]
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          xtwitterId={(() => {
                            try {
                              return $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                "social media accounts"
                              ].find(account => account["account type"] === "x")
                                ? $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                    "social media accounts"
                                  ].find(
                                    account => account["account type"] === "x"
                                  )["account lnk"]
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          youtubeProfile={(() => {
                            try {
                              return $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                "social media accounts"
                              ].find(
                                account => account["account type"] === "youtube"
                              )
                                ? $ctx.plasmicCmsAuthorItem.data.contactInfo[
                                    "social media accounts"
                                  ].find(
                                    account =>
                                      account["account type"] === "youtube"
                                  )["account lnk"]
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </Stack__>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__pkpS2)}
                  >
                    <h3
                      data-plasmic-name={"h3"}
                      data-plasmic-override={overrides.h3}
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3
                      )}
                    >
                      {"Blog"}
                    </h3>
                    <TiptapWrapper
                      data-plasmic-name={"tiptapRichTextEditor"}
                      data-plasmic-override={overrides.tiptapRichTextEditor}
                      className={classNames(
                        "__wab_instance",
                        sty.tiptapRichTextEditor
                      )}
                      contentHtml={(() => {
                        try {
                          return $ctx.plasmicCmsBlogItem.data.content;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      contentJson={generateStateValueProp($state, [
                        "tiptapRichTextEditor",
                        "content"
                      ])}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "tiptapRichTextEditor",
                          "content"
                        ]).apply(null, eventArgs);
                      }}
                      useJson={false}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bir6K
                      )}
                    >
                      {"Enter some text"}
                    </div>
                  </Stack__>
                </Stack__>
              )}
            </DataCtxReader__>
          </CmsQueryRepeater>
        </LayoutPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "columns",
    "column",
    "h1",
    "cmsEntryImage",
    "img",
    "baseComponentsSocialIcons",
    "h3",
    "tiptapRichTextEditor"
  ],
  columns: [
    "columns",
    "column",
    "h1",
    "cmsEntryImage",
    "img",
    "baseComponentsSocialIcons"
  ],
  column: ["column", "h1", "cmsEntryImage", "img", "baseComponentsSocialIcons"],
  h1: ["h1"],
  cmsEntryImage: ["cmsEntryImage", "img"],
  img: ["img"],
  baseComponentsSocialIcons: ["baseComponentsSocialIcons"],
  h3: ["h3"],
  tiptapRichTextEditor: ["tiptapRichTextEditor"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof LayoutPageLayout;
  columns: "div";
  column: "div";
  h1: "h1";
  cmsEntryImage: typeof CmsRowImage;
  img: typeof PlasmicImg__;
  baseComponentsSocialIcons: typeof BaseComponentsSocialIcons;
  h3: "h3";
  tiptapRichTextEditor: typeof TiptapWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicResourceBlog__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicResourceBlog__VariantsArgs;
    args?: PlasmicResourceBlog__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicResourceBlog__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicResourceBlog__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicResourceBlog__ArgProps,
          internalVariantPropNames: PlasmicResourceBlog__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicResourceBlog__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResourceBlog";
  } else {
    func.displayName = `PlasmicResourceBlog.${nodeName}`;
  }
  return func;
}

export const PlasmicResourceBlog = Object.assign(
  // Top-level PlasmicResourceBlog renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    h1: makeNodeComponent("h1"),
    cmsEntryImage: makeNodeComponent("cmsEntryImage"),
    img: makeNodeComponent("img"),
    baseComponentsSocialIcons: makeNodeComponent("baseComponentsSocialIcons"),
    h3: makeNodeComponent("h3"),
    tiptapRichTextEditor: makeNodeComponent("tiptapRichTextEditor"),

    // Metadata about props expected for PlasmicResourceBlog
    internalVariantProps: PlasmicResourceBlog__VariantProps,
    internalArgProps: PlasmicResourceBlog__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicResourceBlog;
/* prettier-ignore-end */
