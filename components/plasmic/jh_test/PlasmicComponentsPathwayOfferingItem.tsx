// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: kAApz3d90Dx6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import BaseComponentsListItem from "../../BaseComponentsListItem"; // plasmic-import: 5qvnFuh0N1V_/component
import BaseComponentsButton from "../../BaseComponentsButton"; // plasmic-import: Jmnl_p0DOnfd/component
import ComponentsLearningLearningGrid from "../../ComponentsLearningLearningGrid"; // plasmic-import: D6Ikb81zwaMg/component

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicComponentsPathwayOfferingItem.module.css"; // plasmic-import: kAApz3d90Dx6/css

import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: o4rUs5FJlNGU/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 24mFtLAbdat_/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: ao7Scrvo-vPs/icon

createPlasmicElementProxy;

export type PlasmicComponentsPathwayOfferingItem__VariantMembers = {
  reverse: "reverse";
  centered: "centered";
};
export type PlasmicComponentsPathwayOfferingItem__VariantsArgs = {
  reverse?: SingleBooleanChoiceArg<"reverse">;
  centered?: SingleBooleanChoiceArg<"centered">;
};
type VariantPropType = keyof PlasmicComponentsPathwayOfferingItem__VariantsArgs;
export const PlasmicComponentsPathwayOfferingItem__VariantProps =
  new Array<VariantPropType>("reverse", "centered");

export type PlasmicComponentsPathwayOfferingItem__ArgsType = {
  offeringImage?: React.ComponentProps<typeof PlasmicImg__>["src"];
  headingSlot?: React.ReactNode;
  offeringListSlot?: React.ReactNode;
  actionSlot?: React.ReactNode;
  imageSlot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicComponentsPathwayOfferingItem__ArgsType;
export const PlasmicComponentsPathwayOfferingItem__ArgProps =
  new Array<ArgPropType>(
    "offeringImage",
    "headingSlot",
    "offeringListSlot",
    "actionSlot",
    "imageSlot"
  );

export type PlasmicComponentsPathwayOfferingItem__OverridesType = {
  root?: Flex__<"div">;
  heading?: Flex__<"h3">;
  upskillChallenges?: Flex__<"div">;
  offeringList?: Flex__<"div">;
  imageStack?: Flex__<"div">;
};

export interface DefaultComponentsPathwayOfferingItemProps {
  offeringImage?: React.ComponentProps<typeof PlasmicImg__>["src"];
  headingSlot?: React.ReactNode;
  offeringListSlot?: React.ReactNode;
  actionSlot?: React.ReactNode;
  imageSlot?: React.ReactNode;
  reverse?: SingleBooleanChoiceArg<"reverse">;
  centered?: SingleBooleanChoiceArg<"centered">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentsPathwayOfferingItem__RenderFunc(props: {
  variants: PlasmicComponentsPathwayOfferingItem__VariantsArgs;
  args: PlasmicComponentsPathwayOfferingItem__ArgsType;
  overrides: PlasmicComponentsPathwayOfferingItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          offeringImage: {
            src: "/plasmic/jh_test/images/image10.png",
            fullWidth: 536,
            fullHeight: 354,
            aspectRatio: undefined
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "reverse",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.reverse
      },
      {
        path: "centered",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.centered
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale"),
          [sty.rootcentered]: hasVariant($state, "centered", "centered"),
          [sty.rootglobal_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [sty.rootreverse]: hasVariant($state, "reverse", "reverse")
        }
      )}
    >
      <h3
        data-plasmic-name={"heading"}
        data-plasmic-override={overrides.heading}
        className={classNames(projectcss.all, projectcss.h3, sty.heading, {
          [sty.headingcentered]: hasVariant($state, "centered", "centered"),
          [sty.headingglobal_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [sty.headingreverse]: hasVariant($state, "reverse", "reverse")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "Upskill Challenges",
          value: args.headingSlot
        })}
      </h3>
      <Stack__
        as={"div"}
        data-plasmic-name={"upskillChallenges"}
        data-plasmic-override={overrides.upskillChallenges}
        hasGap={true}
        className={classNames(projectcss.all, sty.upskillChallenges, {
          [sty.upskillChallengescentered]: hasVariant(
            $state,
            "centered",
            "centered"
          ),
          [sty.upskillChallengesreverse]: hasVariant(
            $state,
            "reverse",
            "reverse"
          )
        })}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"offeringList"}
          data-plasmic-override={overrides.offeringList}
          hasGap={true}
          className={classNames(projectcss.all, sty.offeringList, {
            [sty.offeringListcentered]: hasVariant(
              $state,
              "centered",
              "centered"
            ),
            [sty.offeringListglobal_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            ),
            [sty.offeringListreverse]: hasVariant($state, "reverse", "reverse")
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__o2Sef, {
              [sty.freeBoxglobal_theme_dark__o2Sefe6UCs]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.freeBoxreverse__o2SefvbAZj]: hasVariant(
                $state,
                "reverse",
                "reverse"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__v3BAd)}
                >
                  <BaseComponentsListItem
                    className={classNames(
                      "__wab_instance",
                      sty.baseComponentsListItem__oPWhb
                    )}
                    reverse={true}
                  >
                    {"UCs are bite-sized training lessons"}
                  </BaseComponentsListItem>
                  <BaseComponentsListItem
                    className={classNames(
                      "__wab_instance",
                      sty.baseComponentsListItem__avOi8
                    )}
                    reverse={true}
                  >
                    {"Only 10 - 30 minutes of student time"}
                  </BaseComponentsListItem>
                  <BaseComponentsListItem
                    className={classNames(
                      "__wab_instance",
                      sty.baseComponentsListItem___9T4E
                    )}
                    reverse={true}
                  >
                    {"Quiz to check understanding"}
                  </BaseComponentsListItem>
                  <BaseComponentsListItem
                    className={classNames(
                      "__wab_instance",
                      sty.baseComponentsListItem__wOg4C
                    )}
                    reverse={true}
                  >
                    {"Completely free"}
                  </BaseComponentsListItem>
                </Stack__>
              ),
              value: args.offeringListSlot,
              className: classNames(sty.slotTargetOfferingListSlot, {
                [sty.slotTargetOfferingListSlotglobal_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                ),
                [sty.slotTargetOfferingListSlotreverse]: hasVariant(
                  $state,
                  "reverse",
                  "reverse"
                )
              })
            })}
          </Stack__>
          <div
            className={classNames(projectcss.all, sty.freeBox__vLfxW, {
              [sty.freeBoxcentered__vLfxWcgvzx]: hasVariant(
                $state,
                "centered",
                "centered"
              ),
              [sty.freeBoxglobal_theme_dark__vLfxWe6UCs]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.freeBoxreverse__vLfxWvbAZj]: hasVariant(
                $state,
                "reverse",
                "reverse"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <BaseComponentsButton
                  className={classNames(
                    "__wab_instance",
                    sty.baseComponentsButton__vjRxH
                  )}
                  color={"secondary"}
                  iconEnd={true}
                  kind={["fill"]}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rl67W
                      )}
                    >
                      {"See all Upskill Challenges"}
                    </div>
                  }
                />
              ),

              value: args.actionSlot
            })}
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"imageStack"}
          data-plasmic-override={overrides.imageStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.imageStack, {
            [sty.imageStackglobal_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            ),
            [sty.imageStackreverse]: hasVariant($state, "reverse", "reverse")
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <ComponentsLearningLearningGrid
                className={classNames(
                  "__wab_instance",
                  sty.componentsLearningLearningGrid__mFjKh
                )}
              />
            ),

            value: args.imageSlot
          })}
        </Stack__>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "heading", "upskillChallenges", "offeringList", "imageStack"],
  heading: ["heading"],
  upskillChallenges: ["upskillChallenges", "offeringList", "imageStack"],
  offeringList: ["offeringList"],
  imageStack: ["imageStack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  heading: "h3";
  upskillChallenges: "div";
  offeringList: "div";
  imageStack: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComponentsPathwayOfferingItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComponentsPathwayOfferingItem__VariantsArgs;
    args?: PlasmicComponentsPathwayOfferingItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicComponentsPathwayOfferingItem__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicComponentsPathwayOfferingItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentsPathwayOfferingItem__ArgProps,
          internalVariantPropNames:
            PlasmicComponentsPathwayOfferingItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentsPathwayOfferingItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponentsPathwayOfferingItem";
  } else {
    func.displayName = `PlasmicComponentsPathwayOfferingItem.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentsPathwayOfferingItem = Object.assign(
  // Top-level PlasmicComponentsPathwayOfferingItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    heading: makeNodeComponent("heading"),
    upskillChallenges: makeNodeComponent("upskillChallenges"),
    offeringList: makeNodeComponent("offeringList"),
    imageStack: makeNodeComponent("imageStack"),

    // Metadata about props expected for PlasmicComponentsPathwayOfferingItem
    internalVariantProps: PlasmicComponentsPathwayOfferingItem__VariantProps,
    internalArgProps: PlasmicComponentsPathwayOfferingItem__ArgProps
  }
);

export default PlasmicComponentsPathwayOfferingItem;
/* prettier-ignore-end */
