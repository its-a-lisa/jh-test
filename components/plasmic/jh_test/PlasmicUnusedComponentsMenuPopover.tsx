// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: P0poc5o2GlF7

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BasePopover } from "@plasmicpkgs/react-aria/skinny/registerPopover";
import { BaseListBox } from "@plasmicpkgs/react-aria/skinny/registerListBox";
import { listboxHelpers as BaseListBox_Helpers } from "@plasmicpkgs/react-aria/skinny/registerListBox";
import BaseComponentsMenuItem from "../../BaseComponentsMenuItem"; // plasmic-import: FENpTl10T9dh/component
import UnusedComponentsMenuSection from "../../UnusedComponentsMenuSection"; // plasmic-import: 6u5EPA4kgEpc/component

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicUnusedComponentsMenuPopover.module.css"; // plasmic-import: P0poc5o2GlF7/css

createPlasmicElementProxy;

export type PlasmicUnusedComponentsMenuPopover__VariantMembers = {};
export type PlasmicUnusedComponentsMenuPopover__VariantsArgs = {};
type VariantPropType = keyof PlasmicUnusedComponentsMenuPopover__VariantsArgs;
export const PlasmicUnusedComponentsMenuPopover__VariantProps =
  new Array<VariantPropType>();

export type PlasmicUnusedComponentsMenuPopover__ArgsType = {
  offset?: number;
  menuItems?: React.ReactNode;
  initialSelectedKey?: "Dynamic options";
};
type ArgPropType = keyof PlasmicUnusedComponentsMenuPopover__ArgsType;
export const PlasmicUnusedComponentsMenuPopover__ArgProps =
  new Array<ArgPropType>("offset", "menuItems", "initialSelectedKey");

export type PlasmicUnusedComponentsMenuPopover__OverridesType = {
  root?: Flex__<typeof BasePopover>;
  ariaListBox?: Flex__<typeof BaseListBox>;
};

export interface DefaultUnusedComponentsMenuPopoverProps {
  offset?: number;
  menuItems?: React.ReactNode;
  initialSelectedKey?: "Dynamic options";
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUnusedComponentsMenuPopover__RenderFunc(props: {
  variants: PlasmicUnusedComponentsMenuPopover__VariantsArgs;
  args: PlasmicUnusedComponentsMenuPopover__ArgsType;
  overrides: PlasmicUnusedComponentsMenuPopover__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          offset: 2
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "ariaListBox.selectedValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props["initialSelectedKey"],

        onMutate: generateOnMutateForSpec("selectedValue", BaseListBox_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  const [$ccVariants, setDollarCcVariants] = React.useState<
    Record<string, boolean>
  >({
    placementTop: false,
    placementBottom: false,
    placementLeft: false,
    placementRight: false
  });
  const updateVariant = React.useCallback(
    (changes: Record<string, boolean>) => {
      setDollarCcVariants(prev => {
        if (!Object.keys(changes).some(k => prev[k] !== changes[k])) {
          return prev;
        }
        return { ...prev, ...changes };
      });
    },
    []
  );

  return (
    <BasePopover
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale")
        }
      )}
      matchTriggerWidth={true}
      offset={args.offset}
      placement={"bottom"}
      plasmicUpdateVariant={updateVariant}
      resetClassName={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale")
        }
      )}
      shouldFlip={true}
    >
      {(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.ariaListBox),
          defaultSelectedKeys: args.initialSelectedKey,
          onSelectionChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "selectedValue",
              ["ariaListBox", "selectedValue"],
              BaseListBox_Helpers
            ).apply(null, eventArgs);
          },
          selectedKeys: generateStateValueProp($state, [
            "ariaListBox",
            "selectedValue"
          ]),
          selectionMode: "single"
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "selectedValue",
              plasmicStateName: "ariaListBox.selectedValue"
            }
          ],
          [],
          BaseListBox_Helpers ?? {},
          child$Props
        );

        return (
          <BaseListBox
            data-plasmic-name={"ariaListBox"}
            data-plasmic-override={overrides.ariaListBox}
            {...child$Props}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <BaseComponentsMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.baseComponentsMenuItem___71Lhe
                    )}
                    value={"item1"}
                  />

                  <BaseComponentsMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.baseComponentsMenuItem___6ZIsZ
                    )}
                    label={"Item 2"}
                    value={"item2"}
                  />

                  <BaseComponentsMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.baseComponentsMenuItem__w4Ybw
                    )}
                    label={"Item 3"}
                    value={"item3"}
                  />

                  <UnusedComponentsMenuSection
                    className={classNames(
                      "__wab_instance",
                      sty.unusedComponentsMenuSection__lk3Ex
                    )}
                    items={
                      <React.Fragment>
                        <BaseComponentsMenuItem
                          label={"Section Item 1"}
                          value={"section-item-1"}
                        />

                        <BaseComponentsMenuItem
                          label={"Section Item 2"}
                          value={"section-item-2"}
                        />

                        <BaseComponentsMenuItem
                          label={"Section Item 3"}
                          value={"section-item-3"}
                        />
                      </React.Fragment>
                    }
                  />
                </React.Fragment>
              ),
              value: args.menuItems
            })}
          </BaseListBox>
        );
      })()}
    </BasePopover>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "ariaListBox"],
  ariaListBox: ["ariaListBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof BasePopover;
  ariaListBox: typeof BaseListBox;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUnusedComponentsMenuPopover__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUnusedComponentsMenuPopover__VariantsArgs;
    args?: PlasmicUnusedComponentsMenuPopover__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicUnusedComponentsMenuPopover__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicUnusedComponentsMenuPopover__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUnusedComponentsMenuPopover__ArgProps,
          internalVariantPropNames:
            PlasmicUnusedComponentsMenuPopover__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUnusedComponentsMenuPopover__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUnusedComponentsMenuPopover";
  } else {
    func.displayName = `PlasmicUnusedComponentsMenuPopover.${nodeName}`;
  }
  return func;
}

export const PlasmicUnusedComponentsMenuPopover = Object.assign(
  // Top-level PlasmicUnusedComponentsMenuPopover renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ariaListBox: makeNodeComponent("ariaListBox"),

    // Metadata about props expected for PlasmicUnusedComponentsMenuPopover
    internalVariantProps: PlasmicUnusedComponentsMenuPopover__VariantProps,
    internalArgProps: PlasmicUnusedComponentsMenuPopover__ArgProps
  }
);

export default PlasmicUnusedComponentsMenuPopover;
/* prettier-ignore-end */
