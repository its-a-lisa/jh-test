// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: -3KpQoTp5swZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LayoutPageLayout from "../../LayoutPageLayout"; // plasmic-import: Zd-Ayv7Gl3LR/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicAboutAboutUs.module.css"; // plasmic-import: -3KpQoTp5swZ/css

createPlasmicElementProxy;

export type PlasmicAboutAboutUs__VariantMembers = {};
export type PlasmicAboutAboutUs__VariantsArgs = {};
type VariantPropType = keyof PlasmicAboutAboutUs__VariantsArgs;
export const PlasmicAboutAboutUs__VariantProps = new Array<VariantPropType>();

export type PlasmicAboutAboutUs__ArgsType = {};
type ArgPropType = keyof PlasmicAboutAboutUs__ArgsType;
export const PlasmicAboutAboutUs__ArgProps = new Array<ArgPropType>();

export type PlasmicAboutAboutUs__OverridesType = {
  root?: Flex__<typeof LayoutPageLayout>;
  h2?: Flex__<"h2">;
};

export interface DefaultAboutAboutUsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAboutAboutUs__RenderFunc(props: {
  variants: PlasmicAboutAboutUs__VariantsArgs;
  args: PlasmicAboutAboutUs__ArgsType;
  overrides: PlasmicAboutAboutUs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <LayoutPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__tUacy)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___8MehX)}
            >
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2
                )}
              >
                {"Just Hacking Training (JHT)"}
              </h2>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__w9PsI)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__kCmai
                  )}
                >
                  {"Focused Technical Training for All Levels"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xyFff
                  )}
                >
                  {
                    "JHT is a labor of love for Co-Founders John Hammond and Don Donzal. They are long-time friends that decided to bet on themselves and do something unique in the training space that would help educate and give back to the community. All startups should do their best to differentiate themselves from the industry, especially one as crowded as training and education. We hope to do that in 2 fundamental ways."
                  }
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vElpv)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__gJGnT
                  )}
                >
                  {
                    "All Star Lineup of Courseware Developers and Content Creators"
                  }
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__o3YKp
                  )}
                >
                  {
                    "John and Don have been incredibly lucky over the years to have worked with amazing, talented people who are not only super smart but also are experienced practitioners. It\u2019s these friends we\u2019ve made in the community that already come pre-vetted to a certain degree. It\u2019s a much safer bet and much less time consuming to go with this model than an open call for trainers.\n\nThey say don\u2019t work with friends or family, but we\u2019ve been having a blast. Including others is making it that much more exciting. We also believe that a rising tide lifts all boats. With the list of experts and stars joining us on this journey listed on our front page, we\u2019re sure to make a ton of waves in the industry.\n\nAnd we\u2019re just getting warmed up!!\n"
                  }
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dVmJj)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__h9KRi
                  )}
                >
                  {"New Releases"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4YAtt
                  )}
                >
                  {
                    "It is our intention to announce new courses during the first week of every month. Mid-month, we will announce the arrival of UCs, HALs and CTFs. These announcements will be from John\u2019s social media accounts and his brand newsletter, Cybersecurity Shenanigans. Sign up below in the footer of this site to get lots of great content directly in your inbox.\n\nKeep an eye out for more livestreams from John as well, where he will not only share creative content but also interview many industry experts including our own courseware developers."
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pLg9M
                  )}
                >
                  {"Thanks,\nJohn, Don and the JHT Team"}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__acwcu)}
            >
              <CmsQueryRepeater
                className={classNames(
                  "__wab_instance",
                  sty.cmsDataFetcher__xV2Ae
                )}
                desc={false}
                emptyMessage={
                  <DataCtxReader__>
                    {$ctx => (
                      <CmsRowField
                        className={classNames(
                          "__wab_instance",
                          sty.cmsEntryField__tPz3M
                        )}
                        themeResetClassName={classNames(
                          projectcss.root_reset,
                          projectcss.root_reset_tags,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_17_sds_foundation_global_css.plasmic_tokens,
                          plasmic_17_sds_foundation_system_css.plasmic_tokens,
                          {
                            [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
                              hasVariant(
                                globalVariants,
                                "theme",
                                "darkGrayscale"
                              ),
                            [plasmic_17_sds_foundation_global_css.global_theme_dark]:
                              hasVariant(globalVariants, "theme", "dark"),
                            [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
                              hasVariant(globalVariants, "theme", "grayscale")
                          }
                        )}
                      />
                    )}
                  </DataCtxReader__>
                }
                fields={[]}
                filterField={"author"}
                forceEmptyState={false}
                forceLoadingState={false}
                limit={0}
                loadingMessage={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u22G
                        )}
                      >
                        {"Loading..."}
                      </div>
                    )}
                  </DataCtxReader__>
                }
                noAutoRepeat={false}
                noLayout={false}
                table={"leadershipTeam"}
                useDraft={false}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kM0K)}
                    >
                      <CmsQueryRepeater
                        className={classNames(
                          "__wab_instance",
                          sty.cmsDataFetcher__x09M2
                        )}
                        desc={false}
                        emptyMessage={
                          <DataCtxReader__>
                            {$ctx => (
                              <CmsRowField
                                className={classNames(
                                  "__wab_instance",
                                  sty.cmsEntryField___3MMjm
                                )}
                                themeResetClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.root_reset_tags,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_17_sds_foundation_global_css.plasmic_tokens,
                                  plasmic_17_sds_foundation_system_css.plasmic_tokens,
                                  {
                                    [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
                                      hasVariant(
                                        globalVariants,
                                        "theme",
                                        "darkGrayscale"
                                      ),
                                    [plasmic_17_sds_foundation_global_css.global_theme_dark]:
                                      hasVariant(
                                        globalVariants,
                                        "theme",
                                        "dark"
                                      ),
                                    [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
                                      hasVariant(
                                        globalVariants,
                                        "theme",
                                        "grayscale"
                                      )
                                  }
                                )}
                              />
                            )}
                          </DataCtxReader__>
                        }
                        fields={[]}
                        filterField={"_id"}
                        filterValue={(() => {
                          try {
                            return $ctx.plasmicCmsLeadershipTeamItem.data
                              .author;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        forceEmptyState={false}
                        forceLoadingState={false}
                        limit={0}
                        loadingMessage={
                          <DataCtxReader__>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1U8Vy
                                )}
                              >
                                {"Loading..."}
                              </div>
                            )}
                          </DataCtxReader__>
                        }
                        noAutoRepeat={false}
                        noLayout={false}
                        table={"author"}
                        useDraft={false}
                      >
                        <DataCtxReader__>
                          {$ctx => (
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oOPmj
                              )}
                            >
                              <CmsRowField
                                className={classNames(
                                  "__wab_instance",
                                  sty.cmsEntryField__zmUtF
                                )}
                                field={"name"}
                                table={"author"}
                                themeResetClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.root_reset_tags,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_17_sds_foundation_global_css.plasmic_tokens,
                                  plasmic_17_sds_foundation_system_css.plasmic_tokens,
                                  {
                                    [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
                                      hasVariant(
                                        globalVariants,
                                        "theme",
                                        "darkGrayscale"
                                      ),
                                    [plasmic_17_sds_foundation_global_css.global_theme_dark]:
                                      hasVariant(
                                        globalVariants,
                                        "theme",
                                        "dark"
                                      ),
                                    [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
                                      hasVariant(
                                        globalVariants,
                                        "theme",
                                        "grayscale"
                                      )
                                  }
                                )}
                              />
                            </Stack__>
                          )}
                        </DataCtxReader__>
                      </CmsQueryRepeater>
                    </Stack__>
                  )}
                </DataCtxReader__>
              </CmsQueryRepeater>
            </Stack__>
          </Stack__>
        </LayoutPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h2"],
  h2: ["h2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof LayoutPageLayout;
  h2: "h2";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAboutAboutUs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAboutAboutUs__VariantsArgs;
    args?: PlasmicAboutAboutUs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAboutAboutUs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAboutAboutUs__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAboutAboutUs__ArgProps,
          internalVariantPropNames: PlasmicAboutAboutUs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAboutAboutUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAboutAboutUs";
  } else {
    func.displayName = `PlasmicAboutAboutUs.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutAboutUs = Object.assign(
  // Top-level PlasmicAboutAboutUs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),

    // Metadata about props expected for PlasmicAboutAboutUs
    internalVariantProps: PlasmicAboutAboutUs__VariantProps,
    internalArgProps: PlasmicAboutAboutUs__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAboutAboutUs;
/* prettier-ignore-end */
