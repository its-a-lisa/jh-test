// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: 6u5EPA4kgEpc

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseSection } from "@plasmicpkgs/react-aria/skinny/registerSection";
import BaseComponentsMenuItem from "../../BaseComponentsMenuItem"; // plasmic-import: FENpTl10T9dh/component

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicUnusedComponentsMenuSection.module.css"; // plasmic-import: 6u5EPA4kgEpc/css

createPlasmicElementProxy;

export type PlasmicUnusedComponentsMenuSection__VariantMembers = {};
export type PlasmicUnusedComponentsMenuSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicUnusedComponentsMenuSection__VariantsArgs;
export const PlasmicUnusedComponentsMenuSection__VariantProps =
  new Array<VariantPropType>();

export type PlasmicUnusedComponentsMenuSection__ArgsType = {
  header?: React.ReactNode;
  items?: React.ReactNode;
};
type ArgPropType = keyof PlasmicUnusedComponentsMenuSection__ArgsType;
export const PlasmicUnusedComponentsMenuSection__ArgProps =
  new Array<ArgPropType>("header", "items");

export type PlasmicUnusedComponentsMenuSection__OverridesType = {
  root?: Flex__<typeof BaseSection>;
  headerStack?: Flex__<"div">;
};

export interface DefaultUnusedComponentsMenuSectionProps {
  header?: React.ReactNode;
  items?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUnusedComponentsMenuSection__RenderFunc(props: {
  variants: PlasmicUnusedComponentsMenuSection__VariantsArgs;
  args: PlasmicUnusedComponentsMenuSection__ArgsType;
  overrides: PlasmicUnusedComponentsMenuSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <BaseSection
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale")
        }
      )}
      header={
        <div
          data-plasmic-name={"headerStack"}
          data-plasmic-override={overrides.headerStack}
          className={classNames(projectcss.all, sty.headerStack)}
        >
          {renderPlasmicSlot({
            defaultContents: "Section Header",
            value: args.header,
            className: classNames(sty.slotTargetHeader)
          })}
        </div>
      }
      items={renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <BaseComponentsMenuItem
              label={"Section Item 1"}
              value={"section-item-1"}
            />

            <BaseComponentsMenuItem
              label={"Section Item 2"}
              value={"section-item-2"}
            />

            <BaseComponentsMenuItem
              label={"Section Item 3"}
              value={"section-item-3"}
            />
          </React.Fragment>
        ),
        value: args.items
      })}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "headerStack"],
  headerStack: ["headerStack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof BaseSection;
  headerStack: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUnusedComponentsMenuSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUnusedComponentsMenuSection__VariantsArgs;
    args?: PlasmicUnusedComponentsMenuSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicUnusedComponentsMenuSection__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicUnusedComponentsMenuSection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUnusedComponentsMenuSection__ArgProps,
          internalVariantPropNames:
            PlasmicUnusedComponentsMenuSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUnusedComponentsMenuSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUnusedComponentsMenuSection";
  } else {
    func.displayName = `PlasmicUnusedComponentsMenuSection.${nodeName}`;
  }
  return func;
}

export const PlasmicUnusedComponentsMenuSection = Object.assign(
  // Top-level PlasmicUnusedComponentsMenuSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerStack: makeNodeComponent("headerStack"),

    // Metadata about props expected for PlasmicUnusedComponentsMenuSection
    internalVariantProps: PlasmicUnusedComponentsMenuSection__VariantProps,
    internalArgProps: PlasmicUnusedComponentsMenuSection__ArgProps
  }
);

export default PlasmicUnusedComponentsMenuSection;
/* prettier-ignore-end */
