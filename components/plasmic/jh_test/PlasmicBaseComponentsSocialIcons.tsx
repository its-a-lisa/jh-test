// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: fANKuPlo2Cc-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicBaseComponentsSocialIcons.module.css"; // plasmic-import: fANKuPlo2Cc-/css

import FaDiscordSvgIcon from "./icons/PlasmicIcon__FaDiscordSvg"; // plasmic-import: MaAk5FmpJvKL/icon
import FaLinkedinSvgIcon from "./icons/PlasmicIcon__FaLinkedinSvg"; // plasmic-import: OkqcfyuCXSyh/icon
import FaXTwitterSvgIcon from "./icons/PlasmicIcon__FaXTwitterSvg"; // plasmic-import: 1hqMCUzedNjh/icon
import FaYoutubeSvgIcon from "./icons/PlasmicIcon__FaYoutubeSvg"; // plasmic-import: GXpTcu8b2Dds/icon
import FaTwitchSvgIcon from "./icons/PlasmicIcon__FaTwitchSvg"; // plasmic-import: p6YqiWfHcDSN/icon
import FaMastodonSvgIcon from "./icons/PlasmicIcon__FaMastodonSvg"; // plasmic-import: IHzVtoYyGjcQ/icon
import FaBlueskySvgIcon from "./icons/PlasmicIcon__FaBlueskySvg"; // plasmic-import: 75dQ331yUi5f/icon
import FaThreadsSvgIcon from "./icons/PlasmicIcon__FaThreadsSvg"; // plasmic-import: SuaNU5qvxaSV/icon
import FaFacebookSquareSvgIcon from "./icons/PlasmicIcon__FaFacebookSquareSvg"; // plasmic-import: 5IKC2IIVAaWy/icon
import FaMediumSvgIcon from "./icons/PlasmicIcon__FaMediumSvg"; // plasmic-import: jrRjrhokuSvd/icon
import FaSpotifySvgIcon from "./icons/PlasmicIcon__FaSpotifySvg"; // plasmic-import: rj88yephL93c/icon
import FaGithubSvgIcon from "./icons/PlasmicIcon__FaGithubSvg"; // plasmic-import: jhA4ZBJnH86i/icon
import FaSquareInstagramSvgIcon from "./icons/PlasmicIcon__FaSquareInstagramSvg"; // plasmic-import: Jmmll2PrAgDL/icon

createPlasmicElementProxy;

export type PlasmicBaseComponentsSocialIcons__VariantMembers = {
  socialItem:
    | "discord"
    | "linkedin"
    | "x"
    | "youtube"
    | "twitch"
    | "mastadon"
    | "bluesky"
    | "threads"
    | "facebook"
    | "medium"
    | "spotify"
    | "github"
    | "instagram";
};
export type PlasmicBaseComponentsSocialIcons__VariantsArgs = {
  socialItem?: MultiChoiceArg<
    | "discord"
    | "linkedin"
    | "x"
    | "youtube"
    | "twitch"
    | "mastadon"
    | "bluesky"
    | "threads"
    | "facebook"
    | "medium"
    | "spotify"
    | "github"
    | "instagram"
  >;
};
type VariantPropType = keyof PlasmicBaseComponentsSocialIcons__VariantsArgs;
export const PlasmicBaseComponentsSocialIcons__VariantProps =
  new Array<VariantPropType>("socialItem");

export type PlasmicBaseComponentsSocialIcons__ArgsType = {
  discordServer?: string;
  linkedinProfile?: string;
  xtwitterId?: string;
  youtubeProfile?: string;
  twitchServer?: string;
  mastadonUsername?: string;
  blueskyUsername?: string;
  threadsUsername?: string;
  facebookProfile?: string;
  mediumProfile?: string;
  spotifyPage?: string;
  githubUsername?: string;
  instagramUsername?: string;
};
type ArgPropType = keyof PlasmicBaseComponentsSocialIcons__ArgsType;
export const PlasmicBaseComponentsSocialIcons__ArgProps =
  new Array<ArgPropType>(
    "discordServer",
    "linkedinProfile",
    "xtwitterId",
    "youtubeProfile",
    "twitchServer",
    "mastadonUsername",
    "blueskyUsername",
    "threadsUsername",
    "facebookProfile",
    "mediumProfile",
    "spotifyPage",
    "githubUsername",
    "instagramUsername"
  );

export type PlasmicBaseComponentsSocialIcons__OverridesType = {
  socialMedia?: Flex__<"div">;
  discord?: Flex__<"div">;
  linkedin?: Flex__<"div">;
  xtwitter?: Flex__<"div">;
  youtube?: Flex__<"div">;
  twitch?: Flex__<"div">;
  mastadon?: Flex__<"div">;
  bluesky?: Flex__<"div">;
  threads?: Flex__<"div">;
  facebook?: Flex__<"div">;
  medium?: Flex__<"div">;
  spotify?: Flex__<"div">;
  github?: Flex__<"div">;
  instagram?: Flex__<"div">;
};

export interface DefaultBaseComponentsSocialIconsProps {
  discordServer?: string;
  linkedinProfile?: string;
  xtwitterId?: string;
  youtubeProfile?: string;
  twitchServer?: string;
  mastadonUsername?: string;
  blueskyUsername?: string;
  threadsUsername?: string;
  facebookProfile?: string;
  mediumProfile?: string;
  spotifyPage?: string;
  githubUsername?: string;
  instagramUsername?: string;
  socialItem?: MultiChoiceArg<
    | "discord"
    | "linkedin"
    | "x"
    | "youtube"
    | "twitch"
    | "mastadon"
    | "bluesky"
    | "threads"
    | "facebook"
    | "medium"
    | "spotify"
    | "github"
    | "instagram"
  >;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBaseComponentsSocialIcons__RenderFunc(props: {
  variants: PlasmicBaseComponentsSocialIcons__VariantsArgs;
  args: PlasmicBaseComponentsSocialIcons__ArgsType;
  overrides: PlasmicBaseComponentsSocialIcons__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "socialItem",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.socialItem
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"socialMedia"}
      data-plasmic-override={overrides.socialMedia}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.socialMedia,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale"),
          [sty.socialMediasocialItem_discord]: hasVariant(
            $state,
            "socialItem",
            "discord"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"discord"}
        data-plasmic-override={overrides.discord}
        hasGap={true}
        className={classNames(projectcss.all, sty.discord, {
          [sty.discordsocialItem_discord]: hasVariant(
            $state,
            "socialItem",
            "discord"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["goToPage"] = true
            ? (() => {
                const actionArgs = {
                  destination: (() => {
                    try {
                      return `https://discord.com/invite/${$props.discordServer}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToPage"] != null &&
            typeof $steps["goToPage"] === "object" &&
            typeof $steps["goToPage"].then === "function"
          ) {
            $steps["goToPage"] = await $steps["goToPage"];
          }
        }}
      >
        <FaDiscordSvgIcon
          className={classNames(projectcss.all, sty.svg__hXhC6)}
          role={"img"}
        />
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"linkedin"}
        data-plasmic-override={overrides.linkedin}
        hasGap={true}
        className={classNames(projectcss.all, sty.linkedin, {
          [sty.linkedinsocialItem_linkedin]: hasVariant(
            $state,
            "socialItem",
            "linkedin"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["goToPage"] = true
            ? (() => {
                const actionArgs = {
                  destination: (() => {
                    try {
                      return `https://www.linkedin.com/in/${$props.linkedinProfile}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToPage"] != null &&
            typeof $steps["goToPage"] === "object" &&
            typeof $steps["goToPage"].then === "function"
          ) {
            $steps["goToPage"] = await $steps["goToPage"];
          }
        }}
      >
        <FaLinkedinSvgIcon
          className={classNames(projectcss.all, sty.svg__uyIlv)}
          role={"img"}
        />
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"xtwitter"}
        data-plasmic-override={overrides.xtwitter}
        hasGap={true}
        className={classNames(projectcss.all, sty.xtwitter, {
          [sty.xtwittersocialItem_x]: hasVariant($state, "socialItem", "x")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["goToPage"] = true
            ? (() => {
                const actionArgs = {
                  destination: (() => {
                    try {
                      return `https://x.com/${$props.xtwitterId}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToPage"] != null &&
            typeof $steps["goToPage"] === "object" &&
            typeof $steps["goToPage"].then === "function"
          ) {
            $steps["goToPage"] = await $steps["goToPage"];
          }
        }}
      >
        <FaXTwitterSvgIcon
          className={classNames(projectcss.all, sty.svg__dbPiR)}
          role={"img"}
        />
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"youtube"}
        data-plasmic-override={overrides.youtube}
        hasGap={true}
        className={classNames(projectcss.all, sty.youtube, {
          [sty.youtubesocialItem_youtube]: hasVariant(
            $state,
            "socialItem",
            "youtube"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["goToPage"] = true
            ? (() => {
                const actionArgs = {
                  destination: (() => {
                    try {
                      return `https://www.youtube.com/@${$props.youtubeProfile}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToPage"] != null &&
            typeof $steps["goToPage"] === "object" &&
            typeof $steps["goToPage"].then === "function"
          ) {
            $steps["goToPage"] = await $steps["goToPage"];
          }
        }}
      >
        <FaYoutubeSvgIcon
          className={classNames(projectcss.all, sty.svg__y8Rys)}
          role={"img"}
        />
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"twitch"}
        data-plasmic-override={overrides.twitch}
        hasGap={true}
        className={classNames(projectcss.all, sty.twitch, {
          [sty.twitchsocialItem_twitch]: hasVariant(
            $state,
            "socialItem",
            "twitch"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["goToPage"] = true
            ? (() => {
                const actionArgs = {
                  destination: (() => {
                    try {
                      return `https://www.twitch.tv/${$props.twitchServer}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToPage"] != null &&
            typeof $steps["goToPage"] === "object" &&
            typeof $steps["goToPage"].then === "function"
          ) {
            $steps["goToPage"] = await $steps["goToPage"];
          }
        }}
      >
        <FaTwitchSvgIcon
          className={classNames(projectcss.all, sty.svg___60TuK)}
          role={"img"}
        />
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"mastadon"}
        data-plasmic-override={overrides.mastadon}
        hasGap={true}
        className={classNames(projectcss.all, sty.mastadon, {
          [sty.mastadonsocialItem_mastadon]: hasVariant(
            $state,
            "socialItem",
            "mastadon"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["goToPage"] = true
            ? (() => {
                const actionArgs = {
                  destination: (() => {
                    try {
                      return $props.mastadonUsername;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToPage"] != null &&
            typeof $steps["goToPage"] === "object" &&
            typeof $steps["goToPage"].then === "function"
          ) {
            $steps["goToPage"] = await $steps["goToPage"];
          }
        }}
      >
        <FaMastodonSvgIcon
          className={classNames(projectcss.all, sty.svg__dfgIx)}
          role={"img"}
        />
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"bluesky"}
        data-plasmic-override={overrides.bluesky}
        hasGap={true}
        className={classNames(projectcss.all, sty.bluesky, {
          [sty.blueskysocialItem_bluesky]: hasVariant(
            $state,
            "socialItem",
            "bluesky"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["goToPage"] = true
            ? (() => {
                const actionArgs = {
                  destination: (() => {
                    try {
                      return `https://app.bsky.cz/profile/${$props.blueskyUsername}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToPage"] != null &&
            typeof $steps["goToPage"] === "object" &&
            typeof $steps["goToPage"].then === "function"
          ) {
            $steps["goToPage"] = await $steps["goToPage"];
          }
        }}
      >
        <FaBlueskySvgIcon
          className={classNames(projectcss.all, sty.svg__w91O7)}
          role={"img"}
        />
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"threads"}
        data-plasmic-override={overrides.threads}
        hasGap={true}
        className={classNames(projectcss.all, sty.threads, {
          [sty.threadssocialItem_threads]: hasVariant(
            $state,
            "socialItem",
            "threads"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["goToPage"] = true
            ? (() => {
                const actionArgs = {
                  destination: (() => {
                    try {
                      return `https://www.threads.net/@${$props.threadsUsername}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToPage"] != null &&
            typeof $steps["goToPage"] === "object" &&
            typeof $steps["goToPage"].then === "function"
          ) {
            $steps["goToPage"] = await $steps["goToPage"];
          }
        }}
      >
        <FaThreadsSvgIcon
          className={classNames(projectcss.all, sty.svg__p6Fiy)}
          role={"img"}
        />
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"facebook"}
        data-plasmic-override={overrides.facebook}
        hasGap={true}
        className={classNames(projectcss.all, sty.facebook, {
          [sty.facebooksocialItem_facebook]: hasVariant(
            $state,
            "socialItem",
            "facebook"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["goToPage"] = true
            ? (() => {
                const actionArgs = {
                  destination: (() => {
                    try {
                      return `https://www.facebook.com/${$props.facebookProfile}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToPage"] != null &&
            typeof $steps["goToPage"] === "object" &&
            typeof $steps["goToPage"].then === "function"
          ) {
            $steps["goToPage"] = await $steps["goToPage"];
          }
        }}
      >
        <FaFacebookSquareSvgIcon
          className={classNames(projectcss.all, sty.svg__af7Bz)}
          role={"img"}
        />
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"medium"}
        data-plasmic-override={overrides.medium}
        hasGap={true}
        className={classNames(projectcss.all, sty.medium, {
          [sty.mediumsocialItem_medium]: hasVariant(
            $state,
            "socialItem",
            "medium"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["goToPage"] = true
            ? (() => {
                const actionArgs = {
                  destination: (() => {
                    try {
                      return `https://medium.com/@${$props.mediumProfile}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToPage"] != null &&
            typeof $steps["goToPage"] === "object" &&
            typeof $steps["goToPage"].then === "function"
          ) {
            $steps["goToPage"] = await $steps["goToPage"];
          }
        }}
      >
        <FaMediumSvgIcon
          className={classNames(projectcss.all, sty.svg__zKsIy)}
          role={"img"}
        />
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"spotify"}
        data-plasmic-override={overrides.spotify}
        hasGap={true}
        className={classNames(projectcss.all, sty.spotify, {
          [sty.spotifysocialItem_spotify]: hasVariant(
            $state,
            "socialItem",
            "spotify"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["goToPage"] = true
            ? (() => {
                const actionArgs = {
                  destination: (() => {
                    try {
                      return `https://open.spotify.com/show/${$props.spotifyPage}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToPage"] != null &&
            typeof $steps["goToPage"] === "object" &&
            typeof $steps["goToPage"].then === "function"
          ) {
            $steps["goToPage"] = await $steps["goToPage"];
          }
        }}
      >
        <FaSpotifySvgIcon
          className={classNames(projectcss.all, sty.svg__svnUo)}
          role={"img"}
        />
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"github"}
        data-plasmic-override={overrides.github}
        hasGap={true}
        className={classNames(projectcss.all, sty.github, {
          [sty.githubsocialItem_github]: hasVariant(
            $state,
            "socialItem",
            "github"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["goToPage"] = true
            ? (() => {
                const actionArgs = {
                  destination: (() => {
                    try {
                      return `https://github.com/${$props.githubUsername}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToPage"] != null &&
            typeof $steps["goToPage"] === "object" &&
            typeof $steps["goToPage"].then === "function"
          ) {
            $steps["goToPage"] = await $steps["goToPage"];
          }
        }}
      >
        <FaGithubSvgIcon
          className={classNames(projectcss.all, sty.svg__nQiQt)}
          role={"img"}
        />
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"instagram"}
        data-plasmic-override={overrides.instagram}
        hasGap={true}
        className={classNames(projectcss.all, sty.instagram, {
          [sty.instagramsocialItem_instagram]: hasVariant(
            $state,
            "socialItem",
            "instagram"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["goToPage"] = true
            ? (() => {
                const actionArgs = {
                  destination: (() => {
                    try {
                      return `https://www.instagram.com/${$props.instagramUsername}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToPage"] != null &&
            typeof $steps["goToPage"] === "object" &&
            typeof $steps["goToPage"].then === "function"
          ) {
            $steps["goToPage"] = await $steps["goToPage"];
          }
        }}
      >
        <FaSquareInstagramSvgIcon
          className={classNames(projectcss.all, sty.svg__m30SC)}
          role={"img"}
        />
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  socialMedia: [
    "socialMedia",
    "discord",
    "linkedin",
    "xtwitter",
    "youtube",
    "twitch",
    "mastadon",
    "bluesky",
    "threads",
    "facebook",
    "medium",
    "spotify",
    "github",
    "instagram"
  ],
  discord: ["discord"],
  linkedin: ["linkedin"],
  xtwitter: ["xtwitter"],
  youtube: ["youtube"],
  twitch: ["twitch"],
  mastadon: ["mastadon"],
  bluesky: ["bluesky"],
  threads: ["threads"],
  facebook: ["facebook"],
  medium: ["medium"],
  spotify: ["spotify"],
  github: ["github"],
  instagram: ["instagram"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  socialMedia: "div";
  discord: "div";
  linkedin: "div";
  xtwitter: "div";
  youtube: "div";
  twitch: "div";
  mastadon: "div";
  bluesky: "div";
  threads: "div";
  facebook: "div";
  medium: "div";
  spotify: "div";
  github: "div";
  instagram: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBaseComponentsSocialIcons__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBaseComponentsSocialIcons__VariantsArgs;
    args?: PlasmicBaseComponentsSocialIcons__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBaseComponentsSocialIcons__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBaseComponentsSocialIcons__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBaseComponentsSocialIcons__ArgProps,
          internalVariantPropNames:
            PlasmicBaseComponentsSocialIcons__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBaseComponentsSocialIcons__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "socialMedia") {
    func.displayName = "PlasmicBaseComponentsSocialIcons";
  } else {
    func.displayName = `PlasmicBaseComponentsSocialIcons.${nodeName}`;
  }
  return func;
}

export const PlasmicBaseComponentsSocialIcons = Object.assign(
  // Top-level PlasmicBaseComponentsSocialIcons renders the root element
  makeNodeComponent("socialMedia"),
  {
    // Helper components rendering sub-elements
    discord: makeNodeComponent("discord"),
    linkedin: makeNodeComponent("linkedin"),
    xtwitter: makeNodeComponent("xtwitter"),
    youtube: makeNodeComponent("youtube"),
    twitch: makeNodeComponent("twitch"),
    mastadon: makeNodeComponent("mastadon"),
    bluesky: makeNodeComponent("bluesky"),
    threads: makeNodeComponent("threads"),
    facebook: makeNodeComponent("facebook"),
    medium: makeNodeComponent("medium"),
    spotify: makeNodeComponent("spotify"),
    github: makeNodeComponent("github"),
    instagram: makeNodeComponent("instagram"),

    // Metadata about props expected for PlasmicBaseComponentsSocialIcons
    internalVariantProps: PlasmicBaseComponentsSocialIcons__VariantProps,
    internalArgProps: PlasmicBaseComponentsSocialIcons__ArgProps
  }
);

export default PlasmicBaseComponentsSocialIcons;
/* prettier-ignore-end */
