// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: cGGmkqUuZx0r

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import BaseComponentsButton from "../../BaseComponentsButton"; // plasmic-import: Jmnl_p0DOnfd/component

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicComponentsPathwayExploreItem.module.css"; // plasmic-import: cGGmkqUuZx0r/css

import CtfIcon from "./icons/PlasmicIcon__Ctf"; // plasmic-import: L888xZKVD1mv/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 24mFtLAbdat_/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: ao7Scrvo-vPs/icon

createPlasmicElementProxy;

export type PlasmicComponentsPathwayExploreItem__VariantMembers = {};
export type PlasmicComponentsPathwayExploreItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicComponentsPathwayExploreItem__VariantsArgs;
export const PlasmicComponentsPathwayExploreItem__VariantProps =
  new Array<VariantPropType>();

export type PlasmicComponentsPathwayExploreItem__ArgsType = {
  pathwaySlug?: string;
  headlineSlot?: React.ReactNode;
  iconSlot?: React.ReactNode;
  descriptionSlot?: React.ReactNode;
  actionSlot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicComponentsPathwayExploreItem__ArgsType;
export const PlasmicComponentsPathwayExploreItem__ArgProps =
  new Array<ArgPropType>(
    "pathwaySlug",
    "headlineSlot",
    "iconSlot",
    "descriptionSlot",
    "actionSlot"
  );

export type PlasmicComponentsPathwayExploreItem__OverridesType = {
  stack?: Flex__<"div">;
};

export interface DefaultComponentsPathwayExploreItemProps {
  pathwaySlug?: string;
  headlineSlot?: React.ReactNode;
  iconSlot?: React.ReactNode;
  descriptionSlot?: React.ReactNode;
  actionSlot?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentsPathwayExploreItem__RenderFunc(props: {
  variants: PlasmicComponentsPathwayExploreItem__VariantsArgs;
  args: PlasmicComponentsPathwayExploreItem__ArgsType;
  overrides: PlasmicComponentsPathwayExploreItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          pathwaySlug: "course"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const [isStackHover, triggerStackHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_stack: isStackHover
  };

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <div
      data-plasmic-name={"stack"}
      data-plasmic-override={overrides.stack}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.stack,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale"),
          [sty.stackglobal_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          )
        }
      )}
      data-plasmic-trigger-props={[triggerStackHoverProps]}
    >
      <div className={classNames(projectcss.all, sty.freeBox__vf9Ke)}>
        {renderPlasmicSlot({
          defaultContents: (
            <h4
              className={classNames(
                projectcss.all,
                projectcss.h4,
                projectcss.__wab_text,
                sty.h4__yThGv
              )}
            >
              {"Enter some text"}
            </h4>
          ),
          value: args.headlineSlot
        })}
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___01Aw)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <CtfIcon
              className={classNames(projectcss.all, sty.svg__i381)}
              role={"img"}
            />
          ),

          value: args.iconSlot
        })}
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__rXChj)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__xE6DH)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__y3Flk
                )}
              >
                {"Enter some text"}
              </div>
            ),
            value: args.descriptionSlot,
            className: classNames(sty.slotTargetDescriptionSlot)
          })}
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wgD0F)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <BaseComponentsButton
                className={classNames(
                  "__wab_instance",
                  sty.baseComponentsButton__jTgYd
                )}
                fancy={true}
                size={"extraSmall"}
              />
            ),

            value: args.actionSlot
          })}
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  stack: ["stack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  stack: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComponentsPathwayExploreItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComponentsPathwayExploreItem__VariantsArgs;
    args?: PlasmicComponentsPathwayExploreItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicComponentsPathwayExploreItem__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicComponentsPathwayExploreItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentsPathwayExploreItem__ArgProps,
          internalVariantPropNames:
            PlasmicComponentsPathwayExploreItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentsPathwayExploreItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "stack") {
    func.displayName = "PlasmicComponentsPathwayExploreItem";
  } else {
    func.displayName = `PlasmicComponentsPathwayExploreItem.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentsPathwayExploreItem = Object.assign(
  // Top-level PlasmicComponentsPathwayExploreItem renders the root element
  makeNodeComponent("stack"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicComponentsPathwayExploreItem
    internalVariantProps: PlasmicComponentsPathwayExploreItem__VariantProps,
    internalArgProps: PlasmicComponentsPathwayExploreItem__ArgProps
  }
);

export default PlasmicComponentsPathwayExploreItem;
/* prettier-ignore-end */
