// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: Jmnl_p0DOnfd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseButton } from "@plasmicpkgs/react-aria/skinny/registerButton";

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicBaseComponentsButton.module.css"; // plasmic-import: Jmnl_p0DOnfd/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 24mFtLAbdat_/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: ao7Scrvo-vPs/icon

createPlasmicElementProxy;

export type PlasmicBaseComponentsButton__VariantMembers = {
  color:
    | "primary"
    | "secondary"
    | "neutral"
    | "info"
    | "positive"
    | "notice"
    | "negative"
    | "inverse";
  kind: "fill" | "subtle" | "text" | "bordered";
  backgroundEffect: "soften" | "darken";
  shape: "rounded" | "square" | "pill";
  size: "extraSmall" | "small" | "large" | "extraLarge";
  iconStart: "iconStart";
  iconEnd: "iconEnd";
  flatSide: "top" | "right" | "bottom" | "left";
  compact: "compact";
  fancy: "fancy";
};
export type PlasmicBaseComponentsButton__VariantsArgs = {
  color?: SingleChoiceArg<
    | "primary"
    | "secondary"
    | "neutral"
    | "info"
    | "positive"
    | "notice"
    | "negative"
    | "inverse"
  >;
  kind?: MultiChoiceArg<"fill" | "subtle" | "text" | "bordered">;
  backgroundEffect?: SingleChoiceArg<"soften" | "darken">;
  shape?: SingleChoiceArg<"rounded" | "square" | "pill">;
  size?: SingleChoiceArg<"extraSmall" | "small" | "large" | "extraLarge">;
  iconStart?: SingleBooleanChoiceArg<"iconStart">;
  iconEnd?: SingleBooleanChoiceArg<"iconEnd">;
  flatSide?: MultiChoiceArg<"top" | "right" | "bottom" | "left">;
  compact?: SingleBooleanChoiceArg<"compact">;
  fancy?: SingleBooleanChoiceArg<"fancy">;
};
type VariantPropType = keyof PlasmicBaseComponentsButton__VariantsArgs;
export const PlasmicBaseComponentsButton__VariantProps =
  new Array<VariantPropType>(
    "color",
    "kind",
    "backgroundEffect",
    "shape",
    "size",
    "iconStart",
    "iconEnd",
    "flatSide",
    "compact",
    "fancy"
  );

export type PlasmicBaseComponentsButton__ArgsType = {
  disabled?: boolean;
  submitsForm?: boolean;
  resetsForm?: boolean;
  ariaLabel?: string;
  onClick?: (event: any) => void;
  start?: React.ReactNode;
  label?: React.ReactNode;
  end?: React.ReactNode;
};
type ArgPropType = keyof PlasmicBaseComponentsButton__ArgsType;
export const PlasmicBaseComponentsButton__ArgProps = new Array<ArgPropType>(
  "disabled",
  "submitsForm",
  "resetsForm",
  "ariaLabel",
  "onClick",
  "start",
  "label",
  "end"
);

export type PlasmicBaseComponentsButton__OverridesType = {
  root?: Flex__<typeof BaseButton>;
  overlay?: Flex__<"div">;
  background?: Flex__<"div">;
  border?: Flex__<"div">;
  interactionEffect?: Flex__<"div">;
  contentContainer?: Flex__<"div">;
};

export interface DefaultBaseComponentsButtonProps {
  disabled?: boolean;
  submitsForm?: boolean;
  resetsForm?: boolean;
  ariaLabel?: string;
  onClick?: (event: any) => void;
  start?: React.ReactNode;
  label?: React.ReactNode;
  end?: React.ReactNode;
  color?: SingleChoiceArg<
    | "primary"
    | "secondary"
    | "neutral"
    | "info"
    | "positive"
    | "notice"
    | "negative"
    | "inverse"
  >;
  kind?: MultiChoiceArg<"fill" | "subtle" | "text" | "bordered">;
  backgroundEffect?: SingleChoiceArg<"soften" | "darken">;
  shape?: SingleChoiceArg<"rounded" | "square" | "pill">;
  size?: SingleChoiceArg<"extraSmall" | "small" | "large" | "extraLarge">;
  iconStart?: SingleBooleanChoiceArg<"iconStart">;
  iconEnd?: SingleBooleanChoiceArg<"iconEnd">;
  flatSide?: MultiChoiceArg<"top" | "right" | "bottom" | "left">;
  compact?: SingleBooleanChoiceArg<"compact">;
  fancy?: SingleBooleanChoiceArg<"fancy">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBaseComponentsButton__RenderFunc(props: {
  variants: PlasmicBaseComponentsButton__VariantsArgs;
  args: PlasmicBaseComponentsButton__ArgsType;
  overrides: PlasmicBaseComponentsButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "iconStart",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.iconStart
      },
      {
        path: "iconEnd",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.iconEnd
      },
      {
        path: "kind",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.kind
      },
      {
        path: "flatSide",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.flatSide
      },
      {
        path: "shape",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.shape
      },
      {
        path: "backgroundEffect",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.backgroundEffect
      },
      {
        path: "compact",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.compact
      },
      {
        path: "fancy",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.fancy
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  const [$ccVariants, setDollarCcVariants] = React.useState<
    Record<string, boolean>
  >({
    hovered: false,
    pressed: false,
    focused: false,
    focusVisible: false,
    disabled: false
  });
  const updateVariant = React.useCallback(
    (changes: Record<string, boolean>) => {
      setDollarCcVariants(prev => {
        if (!Object.keys(changes).some(k => prev[k] !== changes[k])) {
          return prev;
        }
        return { ...prev, ...changes };
      });
    },
    []
  );

  return (
    <BaseButton
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      aria-label={args.ariaLabel}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale"),
          [sty.rootbackgroundEffect_darken]: hasVariant(
            $state,
            "backgroundEffect",
            "darken"
          ),
          [sty.rootbackgroundEffect_soften]: hasVariant(
            $state,
            "backgroundEffect",
            "soften"
          ),
          [sty.rootcolor_info]: hasVariant($state, "color", "info"),
          [sty.rootcolor_inverse]: hasVariant($state, "color", "inverse"),
          [sty.rootcolor_notice]: hasVariant($state, "color", "notice"),
          [sty.rootcolor_positive]: hasVariant($state, "color", "positive"),
          [sty.rootcolor_primary]: hasVariant($state, "color", "primary"),
          [sty.rootcolor_primary_kind_fill]:
            hasVariant($state, "kind", "fill") &&
            hasVariant($state, "color", "primary"),
          [sty.rootcompact]: hasVariant($state, "compact", "compact"),
          [sty.rootfancy]: hasVariant($state, "fancy", "fancy"),
          [sty.rootflatSide_bottom]: hasVariant($state, "flatSide", "bottom"),
          [sty.rootflatSide_left]: hasVariant($state, "flatSide", "left"),
          [sty.rootflatSide_right]: hasVariant($state, "flatSide", "right"),
          [sty.rootflatSide_top]: hasVariant($state, "flatSide", "top"),
          [sty.rooticonEnd]: hasVariant($state, "iconEnd", "iconEnd"),
          [sty.rooticonStart]: hasVariant($state, "iconStart", "iconStart"),
          [sty.rootkind_bordered]: hasVariant($state, "kind", "bordered"),
          [sty.rootkind_fill]: hasVariant($state, "kind", "fill"),
          [sty.rootkind_fill_color_notice]:
            hasVariant($state, "color", "notice") &&
            hasVariant($state, "kind", "fill"),
          [sty.rootkind_subtle]: hasVariant($state, "kind", "subtle"),
          [sty.rootkind_text]: hasVariant($state, "kind", "text"),
          [sty.rootshape_pill]: hasVariant($state, "shape", "pill"),
          [sty.rootshape_rounded]: hasVariant($state, "shape", "rounded"),
          [sty.rootsize_extraLarge]: hasVariant($state, "size", "extraLarge"),
          [sty.rootsize_extraSmall]: hasVariant($state, "size", "extraSmall"),
          [sty.rootsize_large]: hasVariant($state, "size", "large"),
          [sty.rootsize_small]: hasVariant($state, "size", "small")
        }
      )}
      isDisabled={args.disabled}
      onPress={args.onClick}
      plasmicUpdateVariant={updateVariant}
      resetsForm={args.resetsForm}
      submitsForm={args.submitsForm}
    >
      <div
        data-plasmic-name={"overlay"}
        data-plasmic-override={overrides.overlay}
        className={classNames(projectcss.all, sty.overlay, {
          [sty.overlaybackgroundEffect_darken]: hasVariant(
            $state,
            "backgroundEffect",
            "darken"
          ),
          [sty.overlaybackgroundEffect_soften]: hasVariant(
            $state,
            "backgroundEffect",
            "soften"
          ),
          [sty.overlaycolor_neutral]: hasVariant($state, "color", "neutral"),
          [sty.overlayflatSide_bottom]: hasVariant(
            $state,
            "flatSide",
            "bottom"
          ),
          [sty.overlayflatSide_left]: hasVariant($state, "flatSide", "left"),
          [sty.overlayflatSide_right]: hasVariant($state, "flatSide", "right"),
          [sty.overlayflatSide_top]: hasVariant($state, "flatSide", "top"),
          [sty.overlayshape_pill]: hasVariant($state, "shape", "pill"),
          [sty.overlayshape_square]: hasVariant($state, "shape", "square")
        })}
      />

      <div
        data-plasmic-name={"background"}
        data-plasmic-override={overrides.background}
        className={classNames(projectcss.all, sty.background, {
          [sty.backgroundbackgroundEffect_darken]: hasVariant(
            $state,
            "backgroundEffect",
            "darken"
          ),
          [sty.backgroundbackgroundEffect_soften]: hasVariant(
            $state,
            "backgroundEffect",
            "soften"
          ),
          [sty.backgroundcolor_info]: hasVariant($state, "color", "info"),
          [sty.backgroundcolor_inverse]: hasVariant($state, "color", "inverse"),
          [sty.backgroundcolor_negative]: hasVariant(
            $state,
            "color",
            "negative"
          ),
          [sty.backgroundcolor_neutral]: hasVariant($state, "color", "neutral"),
          [sty.backgroundcolor_notice]: hasVariant($state, "color", "notice"),
          [sty.backgroundcolor_positive]: hasVariant(
            $state,
            "color",
            "positive"
          ),
          [sty.backgroundcolor_primary]: hasVariant($state, "color", "primary"),
          [sty.backgroundcolor_primary_kind_fill]:
            hasVariant($state, "color", "primary") &&
            hasVariant($state, "kind", "fill"),
          [sty.backgroundcolor_primary_kind_fill_global_theme_dark]:
            hasVariant($state, "kind", "fill") &&
            hasVariant($state, "color", "primary") &&
            hasVariant(globalVariants, "theme", "dark"),
          [sty.backgroundcolor_secondary]: hasVariant(
            $state,
            "color",
            "secondary"
          ),
          [sty.backgroundflatSide_bottom]: hasVariant(
            $state,
            "flatSide",
            "bottom"
          ),
          [sty.backgroundflatSide_left]: hasVariant($state, "flatSide", "left"),
          [sty.backgroundflatSide_right]: hasVariant(
            $state,
            "flatSide",
            "right"
          ),
          [sty.backgroundflatSide_top]: hasVariant($state, "flatSide", "top"),
          [sty.backgroundkind_fill]: hasVariant($state, "kind", "fill"),
          [sty.backgroundkind_subtle]: hasVariant($state, "kind", "subtle"),
          [sty.backgroundkind_text]: hasVariant($state, "kind", "text"),
          [sty.backgroundshape_pill]: hasVariant($state, "shape", "pill"),
          [sty.backgroundshape_square]: hasVariant($state, "shape", "square"),
          [sty.backgroundsize_large]: hasVariant($state, "size", "large")
        })}
      />

      <div
        data-plasmic-name={"border"}
        data-plasmic-override={overrides.border}
        className={classNames(projectcss.all, sty.border, {
          [sty.bordercolor_info]: hasVariant($state, "color", "info"),
          [sty.bordercolor_inverse]: hasVariant($state, "color", "inverse"),
          [sty.bordercolor_negative]: hasVariant($state, "color", "negative"),
          [sty.bordercolor_neutral]: hasVariant($state, "color", "neutral"),
          [sty.bordercolor_notice]: hasVariant($state, "color", "notice"),
          [sty.bordercolor_positive]: hasVariant($state, "color", "positive"),
          [sty.bordercolor_primary]: hasVariant($state, "color", "primary"),
          [sty.bordercolor_secondary]: hasVariant($state, "color", "secondary"),
          [sty.borderflatSide_bottom]: hasVariant($state, "flatSide", "bottom"),
          [sty.borderflatSide_left]: hasVariant($state, "flatSide", "left"),
          [sty.borderflatSide_right]: hasVariant($state, "flatSide", "right"),
          [sty.borderflatSide_top]: hasVariant($state, "flatSide", "top"),
          [sty.borderkind_bordered]: hasVariant($state, "kind", "bordered"),
          [sty.borderkind_fill]: hasVariant($state, "kind", "fill"),
          [sty.borderkind_subtle]: hasVariant($state, "kind", "subtle"),
          [sty.borderkind_text]: hasVariant($state, "kind", "text"),
          [sty.bordershape_pill]: hasVariant($state, "shape", "pill"),
          [sty.bordershape_rounded]: hasVariant($state, "shape", "rounded"),
          [sty.bordershape_square]: hasVariant($state, "shape", "square"),
          [sty.bordersize_large]: hasVariant($state, "size", "large")
        })}
      />

      <div
        data-plasmic-name={"interactionEffect"}
        data-plasmic-override={overrides.interactionEffect}
        className={classNames(projectcss.all, sty.interactionEffect, {
          [sty.interactionEffectcolor_primary]: hasVariant(
            $state,
            "color",
            "primary"
          ),
          [sty.interactionEffectcolor_primary_kind_fill]:
            hasVariant($state, "color", "primary") &&
            hasVariant($state, "kind", "fill"),
          [sty.interactionEffectflatSide_bottom]: hasVariant(
            $state,
            "flatSide",
            "bottom"
          ),
          [sty.interactionEffectflatSide_left]: hasVariant(
            $state,
            "flatSide",
            "left"
          ),
          [sty.interactionEffectflatSide_right]: hasVariant(
            $state,
            "flatSide",
            "right"
          ),
          [sty.interactionEffectflatSide_top]: hasVariant(
            $state,
            "flatSide",
            "top"
          ),
          [sty.interactionEffectkind_fill]: hasVariant($state, "kind", "fill"),
          [sty.interactionEffectshape_pill]: hasVariant(
            $state,
            "shape",
            "pill"
          ),
          [sty.interactionEffectshape_square]: hasVariant(
            $state,
            "shape",
            "square"
          ),
          [sty.interactionEffectsize_large]: hasVariant(
            $state,
            "size",
            "large"
          ),
          [sty.interactionEffectsize_small]: hasVariant($state, "size", "small")
        })}
      />

      <Stack__
        as={"div"}
        data-plasmic-name={"contentContainer"}
        data-plasmic-override={overrides.contentContainer}
        hasGap={true}
        className={classNames(projectcss.all, sty.contentContainer, {
          [sty.contentContainercolor_primary]: hasVariant(
            $state,
            "color",
            "primary"
          ),
          [sty.contentContainercompact]: hasVariant(
            $state,
            "compact",
            "compact"
          ),
          [sty.contentContainerkind_fill]: hasVariant($state, "kind", "fill"),
          [sty.contentContainersize_extraLarge]: hasVariant(
            $state,
            "size",
            "extraLarge"
          ),
          [sty.contentContainersize_extraSmall]: hasVariant(
            $state,
            "size",
            "extraSmall"
          ),
          [sty.contentContainersize_large]: hasVariant($state, "size", "large"),
          [sty.contentContainersize_small]: hasVariant($state, "size", "small")
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__iEsEz, {
            [sty.freeBoxcolor_primary__iEsEz1XrYb]: hasVariant(
              $state,
              "color",
              "primary"
            ),
            [sty.freeBoxiconStart__iEsEzpTk4F]: hasVariant(
              $state,
              "iconStart",
              "iconStart"
            ),
            [sty.freeBoxkind_fill__iEsEzdoDv]: hasVariant(
              $state,
              "kind",
              "fill"
            ),
            [sty.freeBoxsize_extraLarge__iEsEzIt4V]: hasVariant(
              $state,
              "size",
              "extraLarge"
            ),
            [sty.freeBoxsize_large__iEsEzJce86]: hasVariant(
              $state,
              "size",
              "large"
            ),
            [sty.freeBoxsize_small__iEsEZtdo9C]: hasVariant(
              $state,
              "size",
              "small"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <CircleIcon
                className={classNames(projectcss.all, sty.svg__zBl3)}
                role={"img"}
              />
            ),

            value: args.start,
            className: classNames(sty.slotTargetStart, {
              [sty.slotTargetStartbackgroundEffect_darken]: hasVariant(
                $state,
                "backgroundEffect",
                "darken"
              ),
              [sty.slotTargetStartcolor_info]: hasVariant(
                $state,
                "color",
                "info"
              ),
              [sty.slotTargetStartcolor_inverse]: hasVariant(
                $state,
                "color",
                "inverse"
              ),
              [sty.slotTargetStartcolor_inverse_kind_fill]:
                hasVariant($state, "color", "inverse") &&
                hasVariant($state, "kind", "fill"),
              [sty.slotTargetStartcolor_inverse_kind_subtle]:
                hasVariant($state, "kind", "subtle") &&
                hasVariant($state, "color", "inverse"),
              [sty.slotTargetStartcolor_negative]: hasVariant(
                $state,
                "color",
                "negative"
              ),
              [sty.slotTargetStartcolor_neutral]: hasVariant(
                $state,
                "color",
                "neutral"
              ),
              [sty.slotTargetStartcolor_notice]: hasVariant(
                $state,
                "color",
                "notice"
              ),
              [sty.slotTargetStartcolor_positive]: hasVariant(
                $state,
                "color",
                "positive"
              ),
              [sty.slotTargetStartcolor_primary]: hasVariant(
                $state,
                "color",
                "primary"
              ),
              [sty.slotTargetStartcolor_secondary]: hasVariant(
                $state,
                "color",
                "secondary"
              ),
              [sty.slotTargetStarticonStart]: hasVariant(
                $state,
                "iconStart",
                "iconStart"
              ),
              [sty.slotTargetStartkind_fill]: hasVariant(
                $state,
                "kind",
                "fill"
              ),
              [sty.slotTargetStartkind_fill_color_neutral]:
                hasVariant($state, "color", "neutral") &&
                hasVariant($state, "kind", "fill"),
              [sty.slotTargetStartkind_fill_color_notice]:
                hasVariant($state, "color", "notice") &&
                hasVariant($state, "kind", "fill"),
              [sty.slotTargetStartsize_extraLarge]: hasVariant(
                $state,
                "size",
                "extraLarge"
              ),
              [sty.slotTargetStartsize_extraSmall]: hasVariant(
                $state,
                "size",
                "extraSmall"
              ),
              [sty.slotTargetStartsize_large]: hasVariant(
                $state,
                "size",
                "large"
              ),
              [sty.slotTargetStartsize_small]: hasVariant(
                $state,
                "size",
                "small"
              )
            })
          })}
        </div>
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aq1Dx
              )}
            >
              {"Text"}
            </div>
          ),
          value: args.label,
          className: classNames(sty.slotTargetLabel, {
            [sty.slotTargetLabelbackgroundEffect_darken]: hasVariant(
              $state,
              "backgroundEffect",
              "darken"
            ),
            [sty.slotTargetLabelbackgroundEffect_soften]: hasVariant(
              $state,
              "backgroundEffect",
              "soften"
            ),
            [sty.slotTargetLabelcolor_info]: hasVariant(
              $state,
              "color",
              "info"
            ),
            [sty.slotTargetLabelcolor_inverse]: hasVariant(
              $state,
              "color",
              "inverse"
            ),
            [sty.slotTargetLabelcolor_inverse_kind_fill]:
              hasVariant($state, "color", "inverse") &&
              hasVariant($state, "kind", "fill"),
            [sty.slotTargetLabelcolor_inverse_kind_subtle]:
              hasVariant($state, "kind", "subtle") &&
              hasVariant($state, "color", "inverse"),
            [sty.slotTargetLabelcolor_negative]: hasVariant(
              $state,
              "color",
              "negative"
            ),
            [sty.slotTargetLabelcolor_neutral]: hasVariant(
              $state,
              "color",
              "neutral"
            ),
            [sty.slotTargetLabelcolor_positive]: hasVariant(
              $state,
              "color",
              "positive"
            ),
            [sty.slotTargetLabelcolor_primary]: hasVariant(
              $state,
              "color",
              "primary"
            ),
            [sty.slotTargetLabelcolor_primary_kind_fill]:
              hasVariant($state, "color", "primary") &&
              hasVariant($state, "kind", "fill"),
            [sty.slotTargetLabelcolor_secondary]: hasVariant(
              $state,
              "color",
              "secondary"
            ),
            [sty.slotTargetLabeliconEnd]: hasVariant(
              $state,
              "iconEnd",
              "iconEnd"
            ),
            [sty.slotTargetLabeliconStart]: hasVariant(
              $state,
              "iconStart",
              "iconStart"
            ),
            [sty.slotTargetLabelkind_fill]: hasVariant($state, "kind", "fill"),
            [sty.slotTargetLabelkind_fill_color_neutral]:
              hasVariant($state, "color", "neutral") &&
              hasVariant($state, "kind", "fill"),
            [sty.slotTargetLabelkind_fill_color_notice]:
              hasVariant($state, "color", "notice") &&
              hasVariant($state, "kind", "fill"),
            [sty.slotTargetLabelsize_extraLarge]: hasVariant(
              $state,
              "size",
              "extraLarge"
            ),
            [sty.slotTargetLabelsize_extraSmall]: hasVariant(
              $state,
              "size",
              "extraSmall"
            ),
            [sty.slotTargetLabelsize_large]: hasVariant(
              $state,
              "size",
              "large"
            ),
            [sty.slotTargetLabelsize_small]: hasVariant($state, "size", "small")
          })
        })}
        <div
          className={classNames(projectcss.all, sty.freeBox__wFTiK, {
            [sty.freeBoxcolor_neutral__wFTiKnSsAh]: hasVariant(
              $state,
              "color",
              "neutral"
            ),
            [sty.freeBoxiconEnd__wFTiK3LsxF]: hasVariant(
              $state,
              "iconEnd",
              "iconEnd"
            ),
            [sty.freeBoxkind_fill__wFTiKdoDv]: hasVariant(
              $state,
              "kind",
              "fill"
            ),
            [sty.freeBoxsize_extraLarge__wFTiKIt4V]: hasVariant(
              $state,
              "size",
              "extraLarge"
            ),
            [sty.freeBoxsize_large__wFTiKJce86]: hasVariant(
              $state,
              "size",
              "large"
            ),
            [sty.freeBoxsize_small__wFTiKtdo9C]: hasVariant(
              $state,
              "size",
              "small"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <ChevronDownIcon
                className={classNames(projectcss.all, sty.svg__z5W9N)}
                role={"img"}
              />
            ),

            value: args.end,
            className: classNames(sty.slotTargetEnd, {
              [sty.slotTargetEndbackgroundEffect_darken]: hasVariant(
                $state,
                "backgroundEffect",
                "darken"
              ),
              [sty.slotTargetEndcolor_info]: hasVariant(
                $state,
                "color",
                "info"
              ),
              [sty.slotTargetEndcolor_inverse]: hasVariant(
                $state,
                "color",
                "inverse"
              ),
              [sty.slotTargetEndcolor_inverse_kind_fill]:
                hasVariant($state, "color", "inverse") &&
                hasVariant($state, "kind", "fill"),
              [sty.slotTargetEndcolor_inverse_kind_subtle]:
                hasVariant($state, "kind", "subtle") &&
                hasVariant($state, "color", "inverse"),
              [sty.slotTargetEndcolor_negative]: hasVariant(
                $state,
                "color",
                "negative"
              ),
              [sty.slotTargetEndcolor_neutral]: hasVariant(
                $state,
                "color",
                "neutral"
              ),
              [sty.slotTargetEndcolor_notice]: hasVariant(
                $state,
                "color",
                "notice"
              ),
              [sty.slotTargetEndcolor_positive]: hasVariant(
                $state,
                "color",
                "positive"
              ),
              [sty.slotTargetEndcolor_primary]: hasVariant(
                $state,
                "color",
                "primary"
              ),
              [sty.slotTargetEndcolor_secondary]: hasVariant(
                $state,
                "color",
                "secondary"
              ),
              [sty.slotTargetEndiconEnd]: hasVariant(
                $state,
                "iconEnd",
                "iconEnd"
              ),
              [sty.slotTargetEndiconStart]: hasVariant(
                $state,
                "iconStart",
                "iconStart"
              ),
              [sty.slotTargetEndkind_fill]: hasVariant($state, "kind", "fill"),
              [sty.slotTargetEndkind_fill_color_neutral]:
                hasVariant($state, "color", "neutral") &&
                hasVariant($state, "kind", "fill"),
              [sty.slotTargetEndkind_fill_color_notice]:
                hasVariant($state, "color", "notice") &&
                hasVariant($state, "kind", "fill"),
              [sty.slotTargetEndsize_extraLarge]: hasVariant(
                $state,
                "size",
                "extraLarge"
              ),
              [sty.slotTargetEndsize_extraSmall]: hasVariant(
                $state,
                "size",
                "extraSmall"
              ),
              [sty.slotTargetEndsize_large]: hasVariant(
                $state,
                "size",
                "large"
              ),
              [sty.slotTargetEndsize_small]: hasVariant($state, "size", "small")
            })
          })}
        </div>
      </Stack__>
    </BaseButton>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "overlay",
    "background",
    "border",
    "interactionEffect",
    "contentContainer"
  ],
  overlay: ["overlay"],
  background: ["background"],
  border: ["border"],
  interactionEffect: ["interactionEffect"],
  contentContainer: ["contentContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof BaseButton;
  overlay: "div";
  background: "div";
  border: "div";
  interactionEffect: "div";
  contentContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBaseComponentsButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBaseComponentsButton__VariantsArgs;
    args?: PlasmicBaseComponentsButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBaseComponentsButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBaseComponentsButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBaseComponentsButton__ArgProps,
          internalVariantPropNames: PlasmicBaseComponentsButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBaseComponentsButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBaseComponentsButton";
  } else {
    func.displayName = `PlasmicBaseComponentsButton.${nodeName}`;
  }
  return func;
}

export const PlasmicBaseComponentsButton = Object.assign(
  // Top-level PlasmicBaseComponentsButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    overlay: makeNodeComponent("overlay"),
    background: makeNodeComponent("background"),
    border: makeNodeComponent("border"),
    interactionEffect: makeNodeComponent("interactionEffect"),
    contentContainer: makeNodeComponent("contentContainer"),

    // Metadata about props expected for PlasmicBaseComponentsButton
    internalVariantProps: PlasmicBaseComponentsButton__VariantProps,
    internalArgProps: PlasmicBaseComponentsButton__ArgProps
  }
);

export default PlasmicBaseComponentsButton;
/* prettier-ignore-end */
