// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: 4l0V7ewAu7P-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ComponentsAuthorStar from "../../ComponentsAuthorStar"; // plasmic-import: _7HSiSo0ldFE/component
import ComponentsAuthorGroup from "../../ComponentsAuthorGroup"; // plasmic-import: hO9m_SxMqfWL/component

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicSectionsLineup.module.css"; // plasmic-import: 4l0V7ewAu7P-/css

import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: ao7Scrvo-vPs/icon

createPlasmicElementProxy;

export type PlasmicSectionsLineup__VariantMembers = {
  showAll: "showAll";
};
export type PlasmicSectionsLineup__VariantsArgs = {
  showAll?: SingleBooleanChoiceArg<"showAll">;
};
type VariantPropType = keyof PlasmicSectionsLineup__VariantsArgs;
export const PlasmicSectionsLineup__VariantProps = new Array<VariantPropType>(
  "showAll"
);

export type PlasmicSectionsLineup__ArgsType = {};
type ArgPropType = keyof PlasmicSectionsLineup__ArgsType;
export const PlasmicSectionsLineup__ArgProps = new Array<ArgPropType>();

export type PlasmicSectionsLineup__OverridesType = {
  root?: Flex__<"div">;
  h2?: Flex__<"h2">;
  componentsAuthorStar?: Flex__<typeof ComponentsAuthorStar>;
  h5?: Flex__<"h5">;
  svg?: Flex__<"svg">;
  componentsAuthorGroup?: Flex__<typeof ComponentsAuthorGroup>;
};

export interface DefaultSectionsLineupProps {
  showAll?: SingleBooleanChoiceArg<"showAll">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionsLineup__RenderFunc(props: {
  variants: PlasmicSectionsLineup__VariantsArgs;
  args: PlasmicSectionsLineup__ArgsType;
  overrides: PlasmicSectionsLineup__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showAll",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showAll
      },
      {
        path: "toggleShowAll",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale"),
          [sty.rootshowAll]: hasVariant($state, "showAll", "showAll")
        }
      )}
    >
      <h2
        data-plasmic-name={"h2"}
        data-plasmic-override={overrides.h2}
        className={classNames(
          projectcss.all,
          projectcss.h2,
          projectcss.__wab_text,
          sty.h2
        )}
      >
        {"All star lineup @ Just Hacking"}
      </h2>
      <div className={classNames(projectcss.all, sty.freeBox__vpKl)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__yYhqf)}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return ["Katie Paxton-Fear", "Phillip Wylie", "Ali Hadi"];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <ComponentsAuthorStar
                data-plasmic-name={"componentsAuthorStar"}
                data-plasmic-override={overrides.componentsAuthorStar}
                className={classNames(
                  "__wab_instance",
                  sty.componentsAuthorStar
                )}
                key={currentIndex}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return currentItem;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "John Hammond";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </ComponentsAuthorStar>
            );
          })}
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___5MqHt)}
        >
          <h5
            data-plasmic-name={"h5"}
            data-plasmic-override={overrides.h5}
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5
            )}
          >
            {"See All"}
          </h5>
          <ChevronDownIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgshowAll]: hasVariant($state, "showAll", "showAll")
            })}
            onClick={async event => {
              const $steps = {};

              $steps["updateShowAll"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "showAll",
                      operation: 2,
                      value: "showAll"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      const oldValue = $stateGet($state, vgroup);
                      $stateSet($state, vgroup, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateShowAll"] != null &&
                typeof $steps["updateShowAll"] === "object" &&
                typeof $steps["updateShowAll"].then === "function"
              ) {
                $steps["updateShowAll"] = await $steps["updateShowAll"];
              }
            }}
            role={"img"}
          />
        </Stack__>
        <ComponentsAuthorGroup
          data-plasmic-name={"componentsAuthorGroup"}
          data-plasmic-override={overrides.componentsAuthorGroup}
          className={classNames("__wab_instance", sty.componentsAuthorGroup, {
            [sty.componentsAuthorGroupshowAll]: hasVariant(
              $state,
              "showAll",
              "showAll"
            )
          })}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h2",
    "componentsAuthorStar",
    "h5",
    "svg",
    "componentsAuthorGroup"
  ],
  h2: ["h2"],
  componentsAuthorStar: ["componentsAuthorStar"],
  h5: ["h5"],
  svg: ["svg"],
  componentsAuthorGroup: ["componentsAuthorGroup"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h2: "h2";
  componentsAuthorStar: typeof ComponentsAuthorStar;
  h5: "h5";
  svg: "svg";
  componentsAuthorGroup: typeof ComponentsAuthorGroup;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionsLineup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionsLineup__VariantsArgs;
    args?: PlasmicSectionsLineup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSectionsLineup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSectionsLineup__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionsLineup__ArgProps,
          internalVariantPropNames: PlasmicSectionsLineup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionsLineup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionsLineup";
  } else {
    func.displayName = `PlasmicSectionsLineup.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionsLineup = Object.assign(
  // Top-level PlasmicSectionsLineup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    componentsAuthorStar: makeNodeComponent("componentsAuthorStar"),
    h5: makeNodeComponent("h5"),
    svg: makeNodeComponent("svg"),
    componentsAuthorGroup: makeNodeComponent("componentsAuthorGroup"),

    // Metadata about props expected for PlasmicSectionsLineup
    internalVariantProps: PlasmicSectionsLineup__VariantProps,
    internalArgProps: PlasmicSectionsLineup__ArgProps
  }
);

export default PlasmicSectionsLineup;
/* prettier-ignore-end */
