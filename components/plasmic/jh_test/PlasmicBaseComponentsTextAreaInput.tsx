// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wboNivZUXwuALwWQq1HqWe
// Component: P8dhLrphU88w

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseTextArea } from "@plasmicpkgs/react-aria/skinny/registerTextArea";
import { inputHelpers as BaseTextArea_Helpers } from "@plasmicpkgs/react-aria/skinny/registerTextArea";

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wboNivZUXwuALwWQq1HqWe/projectcss
import sty from "./PlasmicBaseComponentsTextAreaInput.module.css"; // plasmic-import: P8dhLrphU88w/css

createPlasmicElementProxy;

export type PlasmicBaseComponentsTextAreaInput__VariantMembers = {
  type: "soft" | "plain";
  flat: "top" | "right" | "bottom" | "left";
  padded: "left" | "right";
};
export type PlasmicBaseComponentsTextAreaInput__VariantsArgs = {
  type?: SingleChoiceArg<"soft" | "plain">;
  flat?: MultiChoiceArg<"top" | "right" | "bottom" | "left">;
  padded?: MultiChoiceArg<"left" | "right">;
};
type VariantPropType = keyof PlasmicBaseComponentsTextAreaInput__VariantsArgs;
export const PlasmicBaseComponentsTextAreaInput__VariantProps =
  new Array<VariantPropType>("type", "flat", "padded");

export type PlasmicBaseComponentsTextAreaInput__ArgsType = {
  placeholder?: string;
  defaultValue?: string;
  disabled?: boolean;
  readOnly?: boolean;
  autoFocus?: boolean;
  inputMode?:
    | "none"
    | "text"
    | "tel"
    | "url"
    | "email"
    | "numeric"
    | "decimal"
    | "search";
  ariaLabel?: string;
  onChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicBaseComponentsTextAreaInput__ArgsType;
export const PlasmicBaseComponentsTextAreaInput__ArgProps =
  new Array<ArgPropType>(
    "placeholder",
    "defaultValue",
    "disabled",
    "readOnly",
    "autoFocus",
    "inputMode",
    "ariaLabel",
    "onChange"
  );

export type PlasmicBaseComponentsTextAreaInput__OverridesType = {
  ariaTextArea?: Flex__<typeof BaseTextArea>;
};

export interface DefaultBaseComponentsTextAreaInputProps {
  placeholder?: string;
  defaultValue?: string;
  disabled?: boolean;
  readOnly?: boolean;
  autoFocus?: boolean;
  inputMode?:
    | "none"
    | "text"
    | "tel"
    | "url"
    | "email"
    | "numeric"
    | "decimal"
    | "search";
  ariaLabel?: string;
  onChange?: (val: string) => void;
  type?: SingleChoiceArg<"soft" | "plain">;
  flat?: MultiChoiceArg<"top" | "right" | "bottom" | "left">;
  padded?: MultiChoiceArg<"left" | "right">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBaseComponentsTextAreaInput__RenderFunc(props: {
  variants: PlasmicBaseComponentsTextAreaInput__VariantsArgs;
  args: PlasmicBaseComponentsTextAreaInput__ArgsType;
  overrides: PlasmicBaseComponentsTextAreaInput__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "ariaTextArea.value",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props["defaultValue"],

        onChangeProp: "onChange",

        onMutate: generateOnMutateForSpec("value", BaseTextArea_Helpers)
      },
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      },
      {
        path: "flat",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.flat
      },
      {
        path: "padded",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.padded
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  const [$ccVariants, setDollarCcVariants] = React.useState<
    Record<string, boolean>
  >({
    focused: false,
    focusVisible: false,
    hovered: false,
    disabled: false
  });
  const updateVariant = React.useCallback(
    (changes: Record<string, boolean>) => {
      setDollarCcVariants(prev => {
        if (!Object.keys(changes).some(k => prev[k] !== changes[k])) {
          return prev;
        }
        return { ...prev, ...changes };
      });
    },
    []
  );

  return (() => {
    const child$Props = {
      "aria-label": args.ariaLabel,
      autoFocus: args.autoFocus,
      className: classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.ariaTextArea,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale"),
          [sty.ariaTextAreaflat_bottom]: hasVariant($state, "flat", "bottom"),
          [sty.ariaTextAreaflat_left]: hasVariant($state, "flat", "left"),
          [sty.ariaTextAreaflat_right]: hasVariant($state, "flat", "right"),
          [sty.ariaTextAreaflat_top]: hasVariant($state, "flat", "top"),
          [sty.ariaTextAreapadded_left]: hasVariant($state, "padded", "left"),
          [sty.ariaTextAreapadded_right]: hasVariant($state, "padded", "right"),
          [sty.ariaTextAreatype_plain]: hasVariant($state, "type", "plain"),
          [sty.ariaTextAreatype_soft]: hasVariant($state, "type", "soft")
        }
      ),
      defaultValue: args.defaultValue,
      disabled: args.disabled,
      inputMode: args.inputMode,
      onChange: async (...eventArgs: any) => {
        generateStateOnChangePropForCodeComponents(
          $state,
          "value",
          ["ariaTextArea", "value"],
          BaseTextArea_Helpers
        ).apply(null, eventArgs);
      },
      placeholder: args.placeholder,
      plasmicUpdateVariant: updateVariant,
      readOnly: args.readOnly,
      value: generateStateValueProp($state, ["ariaTextArea", "value"])
    };
    initializeCodeComponentStates(
      $state,
      [
        {
          name: "value",
          plasmicStateName: "ariaTextArea.value"
        }
      ],
      [],
      BaseTextArea_Helpers ?? {},
      child$Props
    );

    return (
      <BaseTextArea
        data-plasmic-name={"ariaTextArea"}
        data-plasmic-override={overrides.ariaTextArea}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        {...child$Props}
      />
    );
  })() as React.ReactElement | null;
}

const PlasmicDescendants = {
  ariaTextArea: ["ariaTextArea"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  ariaTextArea: typeof BaseTextArea;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBaseComponentsTextAreaInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBaseComponentsTextAreaInput__VariantsArgs;
    args?: PlasmicBaseComponentsTextAreaInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicBaseComponentsTextAreaInput__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicBaseComponentsTextAreaInput__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBaseComponentsTextAreaInput__ArgProps,
          internalVariantPropNames:
            PlasmicBaseComponentsTextAreaInput__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBaseComponentsTextAreaInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ariaTextArea") {
    func.displayName = "PlasmicBaseComponentsTextAreaInput";
  } else {
    func.displayName = `PlasmicBaseComponentsTextAreaInput.${nodeName}`;
  }
  return func;
}

export const PlasmicBaseComponentsTextAreaInput = Object.assign(
  // Top-level PlasmicBaseComponentsTextAreaInput renders the root element
  makeNodeComponent("ariaTextArea"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicBaseComponentsTextAreaInput
    internalVariantProps: PlasmicBaseComponentsTextAreaInput__VariantProps,
    internalArgProps: PlasmicBaseComponentsTextAreaInput__ArgProps
  }
);

export default PlasmicBaseComponentsTextAreaInput;
/* prettier-ignore-end */
